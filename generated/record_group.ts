// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: record_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RecordGroup } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface CreateRecordGroupRequest {
  title: string;
  color: string;
  priority: number;
}

export interface CreateRecordGroupResponse {
  id: string;
  isPublic: boolean;
  publicId: string;
  title: string;
  color: string;
  priority: number;
  createdAt: number;
  updatedAt: number;
}

export interface ListRecordGroupResponse {
  groups: RecordGroup[];
}

export interface JoinRecordGroupRequest {
  publicId: string;
  targetWorkerId: string;
}

export interface UpdateRecordGroupRequest {
  title: string;
  isPublic: boolean;
  color: string;
  priority: number;
}

function createBaseCreateRecordGroupRequest(): CreateRecordGroupRequest {
  return { title: "", color: "", priority: 0 };
}

export const CreateRecordGroupRequest: MessageFns<CreateRecordGroupRequest> = {
  encode(message: CreateRecordGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.color !== "") {
      writer.uint32(18).string(message.color);
    }
    if (message.priority !== 0) {
      writer.uint32(800).uint64(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRecordGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRecordGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.priority = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRecordGroupRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: CreateRecordGroupRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRecordGroupRequest>, I>>(base?: I): CreateRecordGroupRequest {
    return CreateRecordGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRecordGroupRequest>, I>>(object: I): CreateRecordGroupRequest {
    const message = createBaseCreateRecordGroupRequest();
    message.title = object.title ?? "";
    message.color = object.color ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseCreateRecordGroupResponse(): CreateRecordGroupResponse {
  return { id: "", isPublic: false, publicId: "", title: "", color: "", priority: 0, createdAt: 0, updatedAt: 0 };
}

export const CreateRecordGroupResponse: MessageFns<CreateRecordGroupResponse> = {
  encode(message: CreateRecordGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.isPublic !== false) {
      writer.uint32(16).bool(message.isPublic);
    }
    if (message.publicId !== "") {
      writer.uint32(26).string(message.publicId);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.color !== "") {
      writer.uint32(42).string(message.color);
    }
    if (message.priority !== 0) {
      writer.uint32(792).uint64(message.priority);
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).uint64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).uint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRecordGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRecordGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 792) {
            break;
          }

          message.priority = longToNumber(reader.uint64());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRecordGroupResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: CreateRecordGroupResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRecordGroupResponse>, I>>(base?: I): CreateRecordGroupResponse {
    return CreateRecordGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRecordGroupResponse>, I>>(object: I): CreateRecordGroupResponse {
    const message = createBaseCreateRecordGroupResponse();
    message.id = object.id ?? "";
    message.isPublic = object.isPublic ?? false;
    message.publicId = object.publicId ?? "";
    message.title = object.title ?? "";
    message.color = object.color ?? "";
    message.priority = object.priority ?? 0;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseListRecordGroupResponse(): ListRecordGroupResponse {
  return { groups: [] };
}

export const ListRecordGroupResponse: MessageFns<ListRecordGroupResponse> = {
  encode(message: ListRecordGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groups) {
      RecordGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecordGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecordGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groups.push(RecordGroup.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecordGroupResponse {
    return {
      groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e: any) => RecordGroup.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListRecordGroupResponse): unknown {
    const obj: any = {};
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => RecordGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRecordGroupResponse>, I>>(base?: I): ListRecordGroupResponse {
    return ListRecordGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRecordGroupResponse>, I>>(object: I): ListRecordGroupResponse {
    const message = createBaseListRecordGroupResponse();
    message.groups = object.groups?.map((e) => RecordGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseJoinRecordGroupRequest(): JoinRecordGroupRequest {
  return { publicId: "", targetWorkerId: "" };
}

export const JoinRecordGroupRequest: MessageFns<JoinRecordGroupRequest> = {
  encode(message: JoinRecordGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicId !== "") {
      writer.uint32(10).string(message.publicId);
    }
    if (message.targetWorkerId !== "") {
      writer.uint32(18).string(message.targetWorkerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRecordGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRecordGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetWorkerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinRecordGroupRequest {
    return {
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      targetWorkerId: isSet(object.targetWorkerId) ? globalThis.String(object.targetWorkerId) : "",
    };
  },

  toJSON(message: JoinRecordGroupRequest): unknown {
    const obj: any = {};
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.targetWorkerId !== "") {
      obj.targetWorkerId = message.targetWorkerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinRecordGroupRequest>, I>>(base?: I): JoinRecordGroupRequest {
    return JoinRecordGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinRecordGroupRequest>, I>>(object: I): JoinRecordGroupRequest {
    const message = createBaseJoinRecordGroupRequest();
    message.publicId = object.publicId ?? "";
    message.targetWorkerId = object.targetWorkerId ?? "";
    return message;
  },
};

function createBaseUpdateRecordGroupRequest(): UpdateRecordGroupRequest {
  return { title: "", isPublic: false, color: "", priority: 0 };
}

export const UpdateRecordGroupRequest: MessageFns<UpdateRecordGroupRequest> = {
  encode(message: UpdateRecordGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.isPublic !== false) {
      writer.uint32(16).bool(message.isPublic);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    if (message.priority !== 0) {
      writer.uint32(32).uint64(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRecordGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRecordGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.priority = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRecordGroupRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: UpdateRecordGroupRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRecordGroupRequest>, I>>(base?: I): UpdateRecordGroupRequest {
    return UpdateRecordGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRecordGroupRequest>, I>>(object: I): UpdateRecordGroupRequest {
    const message = createBaseUpdateRecordGroupRequest();
    message.title = object.title ?? "";
    message.isPublic = object.isPublic ?? false;
    message.color = object.color ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

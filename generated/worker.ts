// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: worker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Worker } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface WorkerGetResponse {
  worker?: Worker | undefined;
}

export interface WorkerListResponse {
  workers: Worker[];
}

function createBaseWorkerGetResponse(): WorkerGetResponse {
  return { worker: undefined };
}

export const WorkerGetResponse: MessageFns<WorkerGetResponse> = {
  encode(message: WorkerGetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerGetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerGetResponse {
    return { worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined };
  },

  toJSON(message: WorkerGetResponse): unknown {
    const obj: any = {};
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerGetResponse>, I>>(base?: I): WorkerGetResponse {
    return WorkerGetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerGetResponse>, I>>(object: I): WorkerGetResponse {
    const message = createBaseWorkerGetResponse();
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    return message;
  },
};

function createBaseWorkerListResponse(): WorkerListResponse {
  return { workers: [] };
}

export const WorkerListResponse: MessageFns<WorkerListResponse> = {
  encode(message: WorkerListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workers) {
      Worker.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workers.push(Worker.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerListResponse {
    return {
      workers: globalThis.Array.isArray(object?.workers) ? object.workers.map((e: any) => Worker.fromJSON(e)) : [],
    };
  },

  toJSON(message: WorkerListResponse): unknown {
    const obj: any = {};
    if (message.workers?.length) {
      obj.workers = message.workers.map((e) => Worker.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerListResponse>, I>>(base?: I): WorkerListResponse {
    return WorkerListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerListResponse>, I>>(object: I): WorkerListResponse {
    const message = createBaseWorkerListResponse();
    message.workers = object.workers?.map((e) => Worker.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface Worker {
  id: string;
  name: string;
  createdAt: number;
  updatedAt: number;
}

export interface Company {
  id: string;
  publicId: string;
  name: string;
  startedAt: number;
  endedAt: number;
  isWorking: boolean;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface Position {
  id: string;
  publicId: string;
  name: string;
  startedAt: number;
  endedAt: number;
  company?: Company | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface Salary {
  id: string;
  publicId: string;
  amount: number;
  startedAt: number;
  endedAt: number;
  company?: Company | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface Account {
  id: string;
  type: Account_AccountType;
  providerId: string;
  email: string;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

export enum Account_AccountType {
  ACCOUNT_TYPE_UNSPECIFIED = 0,
  ACCOUNT_TYPE_BASIC = 1,
  ACCOUNT_TYPE_PREMIUM = 2,
  UNRECOGNIZED = -1,
}

export function account_AccountTypeFromJSON(object: any): Account_AccountType {
  switch (object) {
    case 0:
    case "ACCOUNT_TYPE_UNSPECIFIED":
      return Account_AccountType.ACCOUNT_TYPE_UNSPECIFIED;
    case 1:
    case "ACCOUNT_TYPE_BASIC":
      return Account_AccountType.ACCOUNT_TYPE_BASIC;
    case 2:
    case "ACCOUNT_TYPE_PREMIUM":
      return Account_AccountType.ACCOUNT_TYPE_PREMIUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Account_AccountType.UNRECOGNIZED;
  }
}

export function account_AccountTypeToJSON(object: Account_AccountType): string {
  switch (object) {
    case Account_AccountType.ACCOUNT_TYPE_UNSPECIFIED:
      return "ACCOUNT_TYPE_UNSPECIFIED";
    case Account_AccountType.ACCOUNT_TYPE_BASIC:
      return "ACCOUNT_TYPE_BASIC";
    case Account_AccountType.ACCOUNT_TYPE_PREMIUM:
      return "ACCOUNT_TYPE_PREMIUM";
    case Account_AccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Certifications {
  id: string;
  name: string;
  number: string;
  issuer: string;
  issuedAt: number;
  expirationPeriod: number;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface Degrees {
  id: string;
  name: string;
  major: string;
  startedAt: number;
  endedAt: number;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface Education {
  id: string;
  name: string;
  startedAt: number;
  endedAt: number;
  agency: string;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface Record {
  id: string;
  title: string;
  type: Record_RecordType;
  description: string;
  startedAt: number;
  endedAt: number;
  recordGroup?: RecordGroup | undefined;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

export enum Record_RecordType {
  UNKNOWN = 0,
  TIME = 1,
  DAY = 2,
  MULTI_DAY = 3,
  UNRECOGNIZED = -1,
}

export function record_RecordTypeFromJSON(object: any): Record_RecordType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Record_RecordType.UNKNOWN;
    case 1:
    case "TIME":
      return Record_RecordType.TIME;
    case 2:
    case "DAY":
      return Record_RecordType.DAY;
    case 3:
    case "MULTI_DAY":
      return Record_RecordType.MULTI_DAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Record_RecordType.UNRECOGNIZED;
  }
}

export function record_RecordTypeToJSON(object: Record_RecordType): string {
  switch (object) {
    case Record_RecordType.UNKNOWN:
      return "UNKNOWN";
    case Record_RecordType.TIME:
      return "TIME";
    case Record_RecordType.DAY:
      return "DAY";
    case Record_RecordType.MULTI_DAY:
      return "MULTI_DAY";
    case Record_RecordType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RecordGroup {
  id: string;
  title: string;
  isPublic: boolean;
  publicId: string;
  color: string;
  priority: number;
  worker?: Worker | undefined;
  createdAt: number;
  updatedAt: number;
}

function createBaseWorker(): Worker {
  return { id: "", name: "", createdAt: 0, updatedAt: 0 };
}

export const Worker: MessageFns<Worker> = {
  encode(message: Worker, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Worker {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Worker {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Worker): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Worker>, I>>(base?: I): Worker {
    return Worker.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Worker>, I>>(object: I): Worker {
    const message = createBaseWorker();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseCompany(): Company {
  return {
    id: "",
    publicId: "",
    name: "",
    startedAt: 0,
    endedAt: 0,
    isWorking: false,
    worker: undefined,
    createdAt: 0,
    updatedAt: 0,
  };
}

export const Company: MessageFns<Company> = {
  encode(message: Company, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.publicId !== "") {
      writer.uint32(18).string(message.publicId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(40).int64(message.endedAt);
    }
    if (message.isWorking !== false) {
      writer.uint32(48).bool(message.isWorking);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(58).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Company {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompany();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isWorking = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Company {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      isWorking: isSet(object.isWorking) ? globalThis.Boolean(object.isWorking) : false,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Company): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isWorking !== false) {
      obj.isWorking = message.isWorking;
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Company>, I>>(base?: I): Company {
    return Company.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Company>, I>>(object: I): Company {
    const message = createBaseCompany();
    message.id = object.id ?? "";
    message.publicId = object.publicId ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.isWorking = object.isWorking ?? false;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBasePosition(): Position {
  return { id: "", publicId: "", name: "", startedAt: 0, endedAt: 0, company: undefined, createdAt: 0, updatedAt: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.publicId !== "") {
      writer.uint32(18).string(message.publicId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(40).int64(message.endedAt);
    }
    if (message.company !== undefined) {
      Company.encode(message.company, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.company = Company.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      company: isSet(object.company) ? Company.fromJSON(object.company) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.company !== undefined) {
      obj.company = Company.toJSON(message.company);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.id = object.id ?? "";
    message.publicId = object.publicId ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.company = (object.company !== undefined && object.company !== null)
      ? Company.fromPartial(object.company)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseSalary(): Salary {
  return { id: "", publicId: "", amount: 0, startedAt: 0, endedAt: 0, company: undefined, createdAt: 0, updatedAt: 0 };
}

export const Salary: MessageFns<Salary> = {
  encode(message: Salary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.publicId !== "") {
      writer.uint32(18).string(message.publicId);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int64(message.amount);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(40).int64(message.endedAt);
    }
    if (message.company !== undefined) {
      Company.encode(message.company, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Salary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSalary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.company = Company.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Salary {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      company: isSet(object.company) ? Company.fromJSON(object.company) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Salary): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.company !== undefined) {
      obj.company = Company.toJSON(message.company);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Salary>, I>>(base?: I): Salary {
    return Salary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Salary>, I>>(object: I): Salary {
    const message = createBaseSalary();
    message.id = object.id ?? "";
    message.publicId = object.publicId ?? "";
    message.amount = object.amount ?? 0;
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.company = (object.company !== undefined && object.company !== null)
      ? Company.fromPartial(object.company)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseAccount(): Account {
  return { id: "", type: 0, providerId: "", email: "", worker: undefined, createdAt: 0, updatedAt: 0 };
}

export const Account: MessageFns<Account> = {
  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.providerId !== "") {
      writer.uint32(26).string(message.providerId);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? account_AccountTypeFromJSON(object.type) : 0,
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = account_AccountTypeToJSON(message.type);
    }
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Account>, I>>(base?: I): Account {
    return Account.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Account>, I>>(object: I): Account {
    const message = createBaseAccount();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.providerId = object.providerId ?? "";
    message.email = object.email ?? "";
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseCertifications(): Certifications {
  return {
    id: "",
    name: "",
    number: "",
    issuer: "",
    issuedAt: 0,
    expirationPeriod: 0,
    worker: undefined,
    createdAt: 0,
    updatedAt: 0,
  };
}

export const Certifications: MessageFns<Certifications> = {
  encode(message: Certifications, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.number !== "") {
      writer.uint32(26).string(message.number);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.issuedAt !== 0) {
      writer.uint32(40).int64(message.issuedAt);
    }
    if (message.expirationPeriod !== 0) {
      writer.uint32(48).int64(message.expirationPeriod);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(58).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Certifications {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertifications();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.issuedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.expirationPeriod = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Certifications {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      issuedAt: isSet(object.issuedAt) ? globalThis.Number(object.issuedAt) : 0,
      expirationPeriod: isSet(object.expirationPeriod) ? globalThis.Number(object.expirationPeriod) : 0,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Certifications): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.issuedAt !== 0) {
      obj.issuedAt = Math.round(message.issuedAt);
    }
    if (message.expirationPeriod !== 0) {
      obj.expirationPeriod = Math.round(message.expirationPeriod);
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Certifications>, I>>(base?: I): Certifications {
    return Certifications.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Certifications>, I>>(object: I): Certifications {
    const message = createBaseCertifications();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.number = object.number ?? "";
    message.issuer = object.issuer ?? "";
    message.issuedAt = object.issuedAt ?? 0;
    message.expirationPeriod = object.expirationPeriod ?? 0;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseDegrees(): Degrees {
  return { id: "", name: "", major: "", startedAt: 0, endedAt: 0, worker: undefined, createdAt: 0, updatedAt: 0 };
}

export const Degrees: MessageFns<Degrees> = {
  encode(message: Degrees, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.major !== "") {
      writer.uint32(26).string(message.major);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(40).int64(message.endedAt);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Degrees {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDegrees();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.major = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Degrees {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      major: isSet(object.major) ? globalThis.String(object.major) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Degrees): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Degrees>, I>>(base?: I): Degrees {
    return Degrees.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Degrees>, I>>(object: I): Degrees {
    const message = createBaseDegrees();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.major = object.major ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseEducation(): Education {
  return { id: "", name: "", startedAt: 0, endedAt: 0, agency: "", worker: undefined, createdAt: 0, updatedAt: 0 };
}

export const Education: MessageFns<Education> = {
  encode(message: Education, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(32).int64(message.endedAt);
    }
    if (message.agency !== "") {
      writer.uint32(42).string(message.agency);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Education {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEducation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Education {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      agency: isSet(object.agency) ? globalThis.String(object.agency) : "",
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Education): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Education>, I>>(base?: I): Education {
    return Education.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Education>, I>>(object: I): Education {
    const message = createBaseEducation();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.agency = object.agency ?? "";
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseRecord(): Record {
  return {
    id: "",
    title: "",
    type: 0,
    description: "",
    startedAt: 0,
    endedAt: 0,
    recordGroup: undefined,
    worker: undefined,
    createdAt: 0,
    updatedAt: 0,
  };
}

export const Record: MessageFns<Record> = {
  encode(message: Record, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.startedAt !== 0) {
      writer.uint32(40).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(48).int64(message.endedAt);
    }
    if (message.recordGroup !== undefined) {
      RecordGroup.encode(message.recordGroup, writer.uint32(58).fork()).join();
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(66).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Record {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.recordGroup = RecordGroup.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Record {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      type: isSet(object.type) ? record_RecordTypeFromJSON(object.type) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      recordGroup: isSet(object.recordGroup) ? RecordGroup.fromJSON(object.recordGroup) : undefined,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: Record): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.type !== 0) {
      obj.type = record_RecordTypeToJSON(message.type);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.recordGroup !== undefined) {
      obj.recordGroup = RecordGroup.toJSON(message.recordGroup);
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Record>, I>>(base?: I): Record {
    return Record.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Record>, I>>(object: I): Record {
    const message = createBaseRecord();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.type = object.type ?? 0;
    message.description = object.description ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.recordGroup = (object.recordGroup !== undefined && object.recordGroup !== null)
      ? RecordGroup.fromPartial(object.recordGroup)
      : undefined;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseRecordGroup(): RecordGroup {
  return {
    id: "",
    title: "",
    isPublic: false,
    publicId: "",
    color: "",
    priority: 0,
    worker: undefined,
    createdAt: 0,
    updatedAt: 0,
  };
}

export const RecordGroup: MessageFns<RecordGroup> = {
  encode(message: RecordGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.isPublic !== false) {
      writer.uint32(24).bool(message.isPublic);
    }
    if (message.publicId !== "") {
      writer.uint32(34).string(message.publicId);
    }
    if (message.color !== "") {
      writer.uint32(42).string(message.color);
    }
    if (message.priority !== 0) {
      writer.uint32(784).int64(message.priority);
    }
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(794).fork()).join();
    }
    if (message.createdAt !== 0) {
      writer.uint32(800).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(808).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.publicId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 98: {
          if (tag !== 784) {
            break;
          }

          message.priority = longToNumber(reader.int64());
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordGroup {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: RecordGroup): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordGroup>, I>>(base?: I): RecordGroup {
    return RecordGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordGroup>, I>>(object: I): RecordGroup {
    const message = createBaseRecordGroup();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.isPublic = object.isPublic ?? false;
    message.publicId = object.publicId ?? "";
    message.color = object.color ?? "";
    message.priority = object.priority ?? 0;
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: resume.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  Activity_ActivityType,
  activity_ActivityTypeFromJSON,
  activity_ActivityTypeToJSON,
  Attachment_AttachmentCategory,
  attachment_AttachmentCategoryFromJSON,
  attachment_AttachmentCategoryToJSON,
  Attachment_AttachmentType,
  attachment_AttachmentTypeFromJSON,
  attachment_AttachmentTypeToJSON,
  Career_EmploymentType,
  career_EmploymentTypeFromJSON,
  career_EmploymentTypeToJSON,
  Education_EducationStatus,
  education_EducationStatusFromJSON,
  education_EducationStatusToJSON,
  LanguageSkill_Language,
  languageSkill_LanguageFromJSON,
  LanguageSkill_LanguageLevel,
  languageSkill_LanguageLevelFromJSON,
  languageSkill_LanguageLevelToJSON,
  languageSkill_LanguageToJSON,
  Resume,
  Resume_Gender,
  resume_GenderFromJSON,
  resume_GenderToJSON,
  ResumeDetail,
} from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface ResumeCreateRequest {
  title: string;
  name: string;
  phone: string;
  email: string;
  birthDate?: number | undefined;
  gender?: Resume_Gender | undefined;
  job: string;
  isPublic?: boolean | undefined;
  isDefault?: boolean | undefined;
  description: string;
}

export interface ResumeUpdateRequest {
  id: string;
  title: string;
  name: string;
  phone: string;
  email: string;
  birthDate?: number | undefined;
  gender?: Resume_Gender | undefined;
  job: string;
  isPublic?: boolean | undefined;
  isDefault?: boolean | undefined;
  description: string;
  careers: ResumeUpdateRequest_CareerRequest[];
  projects: ResumeUpdateRequest_ProjectRequest[];
  educations: ResumeUpdateRequest_EducationRequest[];
  activities: ResumeUpdateRequest_ActivityRequest[];
  languages: ResumeUpdateRequest_LanguageSkillRequest[];
  attachments: ResumeUpdateRequest_AttachmentRequest[];
}

export interface ResumeUpdateRequest_CareerRequest {
  career?: ResumeUpdateRequest_CareerRequest_CareerItem | undefined;
  salaries: ResumeUpdateRequest_CareerRequest_Salary[];
}

export interface ResumeUpdateRequest_CareerRequest_CareerItem {
  id?: string | undefined;
  name: string;
  startedAt?: number | undefined;
  endedAt?: number | undefined;
  isWorking?: boolean | undefined;
  position: string;
  employmentType?: Career_EmploymentType | undefined;
  department: string;
  jobGrade: string;
  job: string;
  salary: number;
  description: string;
  isVisible: boolean;
  priority: number;
}

export interface ResumeUpdateRequest_CareerRequest_Salary {
  id?: string | undefined;
  amount: number;
  memo: string;
  negotiationDate?: number | undefined;
  isVisible: boolean;
  priority: number;
}

export interface ResumeUpdateRequest_EducationRequest {
  id?: string | undefined;
  major: string;
  name: string;
  description: string;
  status?: Education_EducationStatus | undefined;
  startedAt?: number | undefined;
  endedAt?: number | undefined;
  isVisible: boolean;
  priority: number;
}

export interface ResumeUpdateRequest_ActivityRequest {
  id?: string | undefined;
  type?: Activity_ActivityType | undefined;
  name: string;
  organization: string;
  certificateNumber: string;
  startedAt?: number | undefined;
  endedAt?: number | undefined;
  description: string;
  isVisible: boolean;
  priority: number;
}

export interface ResumeUpdateRequest_LanguageSkillRequest {
  id?: string | undefined;
  language?: LanguageSkill_Language | undefined;
  level?: LanguageSkill_LanguageLevel | undefined;
  isVisible: boolean;
  priority: number;
  languageTests: ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest[];
}

export interface ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest {
  id?: string | undefined;
  name: string;
  score: string;
  acquiredAt?: number | undefined;
  isVisible: boolean;
  priority: number;
}

export interface ResumeUpdateRequest_AttachmentRequest {
  id?: string | undefined;
  type?: Attachment_AttachmentType | undefined;
  category: Attachment_AttachmentCategory;
  url: string;
  fileName: string;
  fileUrl: string;
  fileData?: Uint8Array | undefined;
  isVisible: boolean;
  priority: number;
}

export interface ResumeUpdateRequest_ProjectRequest {
  id?: string | undefined;
  title: string;
  affiliation: string;
  role: string;
  description: string;
  startedAt?: number | undefined;
  endedAt?: number | undefined;
  isVisible: boolean;
  priority: number;
}

export interface ResumeListResponse {
  resumes: Resume[];
}

export interface ResumeDetailListResponse {
  resumes: ResumeDetail[];
}

export interface ResumeResponse {
  resume?: Resume | undefined;
}

function createBaseResumeCreateRequest(): ResumeCreateRequest {
  return {
    title: "",
    name: "",
    phone: "",
    email: "",
    birthDate: undefined,
    gender: undefined,
    job: "",
    isPublic: undefined,
    isDefault: undefined,
    description: "",
  };
}

export const ResumeCreateRequest: MessageFns<ResumeCreateRequest> = {
  encode(message: ResumeCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.phone !== "") {
      writer.uint32(34).string(message.phone);
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.birthDate !== undefined) {
      writer.uint32(48).uint64(message.birthDate);
    }
    if (message.gender !== undefined) {
      writer.uint32(56).int32(message.gender);
    }
    if (message.job !== "") {
      writer.uint32(66).string(message.job);
    }
    if (message.isPublic !== undefined) {
      writer.uint32(72).bool(message.isPublic);
    }
    if (message.isDefault !== undefined) {
      writer.uint32(80).bool(message.isDefault);
    }
    if (message.description !== "") {
      writer.uint32(90).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.birthDate = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.job = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeCreateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      birthDate: isSet(object.birthDate) ? globalThis.Number(object.birthDate) : undefined,
      gender: isSet(object.gender) ? resume_GenderFromJSON(object.gender) : undefined,
      job: isSet(object.job) ? globalThis.String(object.job) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : undefined,
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: ResumeCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.birthDate !== undefined) {
      obj.birthDate = Math.round(message.birthDate);
    }
    if (message.gender !== undefined) {
      obj.gender = resume_GenderToJSON(message.gender);
    }
    if (message.job !== "") {
      obj.job = message.job;
    }
    if (message.isPublic !== undefined) {
      obj.isPublic = message.isPublic;
    }
    if (message.isDefault !== undefined) {
      obj.isDefault = message.isDefault;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeCreateRequest>, I>>(base?: I): ResumeCreateRequest {
    return ResumeCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeCreateRequest>, I>>(object: I): ResumeCreateRequest {
    const message = createBaseResumeCreateRequest();
    message.title = object.title ?? "";
    message.name = object.name ?? "";
    message.phone = object.phone ?? "";
    message.email = object.email ?? "";
    message.birthDate = object.birthDate ?? undefined;
    message.gender = object.gender ?? undefined;
    message.job = object.job ?? "";
    message.isPublic = object.isPublic ?? undefined;
    message.isDefault = object.isDefault ?? undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseResumeUpdateRequest(): ResumeUpdateRequest {
  return {
    id: "",
    title: "",
    name: "",
    phone: "",
    email: "",
    birthDate: undefined,
    gender: undefined,
    job: "",
    isPublic: undefined,
    isDefault: undefined,
    description: "",
    careers: [],
    projects: [],
    educations: [],
    activities: [],
    languages: [],
    attachments: [],
  };
}

export const ResumeUpdateRequest: MessageFns<ResumeUpdateRequest> = {
  encode(message: ResumeUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.phone !== "") {
      writer.uint32(34).string(message.phone);
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.birthDate !== undefined) {
      writer.uint32(48).uint64(message.birthDate);
    }
    if (message.gender !== undefined) {
      writer.uint32(56).int32(message.gender);
    }
    if (message.job !== "") {
      writer.uint32(66).string(message.job);
    }
    if (message.isPublic !== undefined) {
      writer.uint32(72).bool(message.isPublic);
    }
    if (message.isDefault !== undefined) {
      writer.uint32(80).bool(message.isDefault);
    }
    if (message.description !== "") {
      writer.uint32(90).string(message.description);
    }
    for (const v of message.careers) {
      ResumeUpdateRequest_CareerRequest.encode(v!, writer.uint32(410).fork()).join();
    }
    for (const v of message.projects) {
      ResumeUpdateRequest_ProjectRequest.encode(v!, writer.uint32(418).fork()).join();
    }
    for (const v of message.educations) {
      ResumeUpdateRequest_EducationRequest.encode(v!, writer.uint32(426).fork()).join();
    }
    for (const v of message.activities) {
      ResumeUpdateRequest_ActivityRequest.encode(v!, writer.uint32(434).fork()).join();
    }
    for (const v of message.languages) {
      ResumeUpdateRequest_LanguageSkillRequest.encode(v!, writer.uint32(442).fork()).join();
    }
    for (const v of message.attachments) {
      ResumeUpdateRequest_AttachmentRequest.encode(v!, writer.uint32(450).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.birthDate = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.job = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.careers.push(ResumeUpdateRequest_CareerRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.projects.push(ResumeUpdateRequest_ProjectRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.educations.push(ResumeUpdateRequest_EducationRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.activities.push(ResumeUpdateRequest_ActivityRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.languages.push(ResumeUpdateRequest_LanguageSkillRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.attachments.push(ResumeUpdateRequest_AttachmentRequest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      birthDate: isSet(object.birthDate) ? globalThis.Number(object.birthDate) : undefined,
      gender: isSet(object.gender) ? resume_GenderFromJSON(object.gender) : undefined,
      job: isSet(object.job) ? globalThis.String(object.job) : "",
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : undefined,
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      careers: globalThis.Array.isArray(object?.careers)
        ? object.careers.map((e: any) => ResumeUpdateRequest_CareerRequest.fromJSON(e))
        : [],
      projects: globalThis.Array.isArray(object?.projects)
        ? object.projects.map((e: any) => ResumeUpdateRequest_ProjectRequest.fromJSON(e))
        : [],
      educations: globalThis.Array.isArray(object?.educations)
        ? object.educations.map((e: any) => ResumeUpdateRequest_EducationRequest.fromJSON(e))
        : [],
      activities: globalThis.Array.isArray(object?.activities)
        ? object.activities.map((e: any) => ResumeUpdateRequest_ActivityRequest.fromJSON(e))
        : [],
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => ResumeUpdateRequest_LanguageSkillRequest.fromJSON(e))
        : [],
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => ResumeUpdateRequest_AttachmentRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.birthDate !== undefined) {
      obj.birthDate = Math.round(message.birthDate);
    }
    if (message.gender !== undefined) {
      obj.gender = resume_GenderToJSON(message.gender);
    }
    if (message.job !== "") {
      obj.job = message.job;
    }
    if (message.isPublic !== undefined) {
      obj.isPublic = message.isPublic;
    }
    if (message.isDefault !== undefined) {
      obj.isDefault = message.isDefault;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.careers?.length) {
      obj.careers = message.careers.map((e) => ResumeUpdateRequest_CareerRequest.toJSON(e));
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => ResumeUpdateRequest_ProjectRequest.toJSON(e));
    }
    if (message.educations?.length) {
      obj.educations = message.educations.map((e) => ResumeUpdateRequest_EducationRequest.toJSON(e));
    }
    if (message.activities?.length) {
      obj.activities = message.activities.map((e) => ResumeUpdateRequest_ActivityRequest.toJSON(e));
    }
    if (message.languages?.length) {
      obj.languages = message.languages.map((e) => ResumeUpdateRequest_LanguageSkillRequest.toJSON(e));
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => ResumeUpdateRequest_AttachmentRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest>, I>>(base?: I): ResumeUpdateRequest {
    return ResumeUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest>, I>>(object: I): ResumeUpdateRequest {
    const message = createBaseResumeUpdateRequest();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.name = object.name ?? "";
    message.phone = object.phone ?? "";
    message.email = object.email ?? "";
    message.birthDate = object.birthDate ?? undefined;
    message.gender = object.gender ?? undefined;
    message.job = object.job ?? "";
    message.isPublic = object.isPublic ?? undefined;
    message.isDefault = object.isDefault ?? undefined;
    message.description = object.description ?? "";
    message.careers = object.careers?.map((e) => ResumeUpdateRequest_CareerRequest.fromPartial(e)) || [];
    message.projects = object.projects?.map((e) => ResumeUpdateRequest_ProjectRequest.fromPartial(e)) || [];
    message.educations = object.educations?.map((e) => ResumeUpdateRequest_EducationRequest.fromPartial(e)) || [];
    message.activities = object.activities?.map((e) => ResumeUpdateRequest_ActivityRequest.fromPartial(e)) || [];
    message.languages = object.languages?.map((e) => ResumeUpdateRequest_LanguageSkillRequest.fromPartial(e)) || [];
    message.attachments = object.attachments?.map((e) => ResumeUpdateRequest_AttachmentRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeUpdateRequest_CareerRequest(): ResumeUpdateRequest_CareerRequest {
  return { career: undefined, salaries: [] };
}

export const ResumeUpdateRequest_CareerRequest: MessageFns<ResumeUpdateRequest_CareerRequest> = {
  encode(message: ResumeUpdateRequest_CareerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.career !== undefined) {
      ResumeUpdateRequest_CareerRequest_CareerItem.encode(message.career, writer.uint32(10).fork()).join();
    }
    for (const v of message.salaries) {
      ResumeUpdateRequest_CareerRequest_Salary.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CareerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CareerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.career = ResumeUpdateRequest_CareerRequest_CareerItem.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.salaries.push(ResumeUpdateRequest_CareerRequest_Salary.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CareerRequest {
    return {
      career: isSet(object.career) ? ResumeUpdateRequest_CareerRequest_CareerItem.fromJSON(object.career) : undefined,
      salaries: globalThis.Array.isArray(object?.salaries)
        ? object.salaries.map((e: any) => ResumeUpdateRequest_CareerRequest_Salary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeUpdateRequest_CareerRequest): unknown {
    const obj: any = {};
    if (message.career !== undefined) {
      obj.career = ResumeUpdateRequest_CareerRequest_CareerItem.toJSON(message.career);
    }
    if (message.salaries?.length) {
      obj.salaries = message.salaries.map((e) => ResumeUpdateRequest_CareerRequest_Salary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CareerRequest {
    return ResumeUpdateRequest_CareerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_CareerRequest {
    const message = createBaseResumeUpdateRequest_CareerRequest();
    message.career = (object.career !== undefined && object.career !== null)
      ? ResumeUpdateRequest_CareerRequest_CareerItem.fromPartial(object.career)
      : undefined;
    message.salaries = object.salaries?.map((e) => ResumeUpdateRequest_CareerRequest_Salary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeUpdateRequest_CareerRequest_CareerItem(): ResumeUpdateRequest_CareerRequest_CareerItem {
  return {
    id: undefined,
    name: "",
    startedAt: undefined,
    endedAt: undefined,
    isWorking: undefined,
    position: "",
    employmentType: undefined,
    department: "",
    jobGrade: "",
    job: "",
    salary: 0,
    description: "",
    isVisible: false,
    priority: 0,
  };
}

export const ResumeUpdateRequest_CareerRequest_CareerItem: MessageFns<ResumeUpdateRequest_CareerRequest_CareerItem> = {
  encode(
    message: ResumeUpdateRequest_CareerRequest_CareerItem,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== undefined) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.isWorking !== undefined) {
      writer.uint32(40).bool(message.isWorking);
    }
    if (message.position !== "") {
      writer.uint32(50).string(message.position);
    }
    if (message.employmentType !== undefined) {
      writer.uint32(56).int32(message.employmentType);
    }
    if (message.department !== "") {
      writer.uint32(66).string(message.department);
    }
    if (message.jobGrade !== "") {
      writer.uint32(74).string(message.jobGrade);
    }
    if (message.job !== "") {
      writer.uint32(82).string(message.job);
    }
    if (message.salary !== 0) {
      writer.uint32(88).uint32(message.salary);
    }
    if (message.description !== "") {
      writer.uint32(98).string(message.description);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CareerRequest_CareerItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CareerRequest_CareerItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isWorking = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.employmentType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.department = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.jobGrade = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.job = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.salary = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CareerRequest_CareerItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      isWorking: isSet(object.isWorking) ? globalThis.Boolean(object.isWorking) : undefined,
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      employmentType: isSet(object.employmentType) ? career_EmploymentTypeFromJSON(object.employmentType) : undefined,
      department: isSet(object.department) ? globalThis.String(object.department) : "",
      jobGrade: isSet(object.jobGrade) ? globalThis.String(object.jobGrade) : "",
      job: isSet(object.job) ? globalThis.String(object.job) : "",
      salary: isSet(object.salary) ? globalThis.Number(object.salary) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_CareerRequest_CareerItem): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isWorking !== undefined) {
      obj.isWorking = message.isWorking;
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.employmentType !== undefined) {
      obj.employmentType = career_EmploymentTypeToJSON(message.employmentType);
    }
    if (message.department !== "") {
      obj.department = message.department;
    }
    if (message.jobGrade !== "") {
      obj.jobGrade = message.jobGrade;
    }
    if (message.job !== "") {
      obj.job = message.job;
    }
    if (message.salary !== 0) {
      obj.salary = Math.round(message.salary);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_CareerItem>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CareerRequest_CareerItem {
    return ResumeUpdateRequest_CareerRequest_CareerItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_CareerItem>, I>>(
    object: I,
  ): ResumeUpdateRequest_CareerRequest_CareerItem {
    const message = createBaseResumeUpdateRequest_CareerRequest_CareerItem();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.isWorking = object.isWorking ?? undefined;
    message.position = object.position ?? "";
    message.employmentType = object.employmentType ?? undefined;
    message.department = object.department ?? "";
    message.jobGrade = object.jobGrade ?? "";
    message.job = object.job ?? "";
    message.salary = object.salary ?? 0;
    message.description = object.description ?? "";
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_CareerRequest_Salary(): ResumeUpdateRequest_CareerRequest_Salary {
  return { id: undefined, amount: 0, memo: "", negotiationDate: undefined, isVisible: false, priority: 0 };
}

export const ResumeUpdateRequest_CareerRequest_Salary: MessageFns<ResumeUpdateRequest_CareerRequest_Salary> = {
  encode(message: ResumeUpdateRequest_CareerRequest_Salary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint64(message.amount);
    }
    if (message.memo !== "") {
      writer.uint32(26).string(message.memo);
    }
    if (message.negotiationDate !== undefined) {
      writer.uint32(32).uint64(message.negotiationDate);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CareerRequest_Salary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CareerRequest_Salary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.negotiationDate = longToNumber(reader.uint64());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CareerRequest_Salary {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
      negotiationDate: isSet(object.negotiationDate) ? globalThis.Number(object.negotiationDate) : undefined,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_CareerRequest_Salary): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.negotiationDate !== undefined) {
      obj.negotiationDate = Math.round(message.negotiationDate);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_Salary>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CareerRequest_Salary {
    return ResumeUpdateRequest_CareerRequest_Salary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_Salary>, I>>(
    object: I,
  ): ResumeUpdateRequest_CareerRequest_Salary {
    const message = createBaseResumeUpdateRequest_CareerRequest_Salary();
    message.id = object.id ?? undefined;
    message.amount = object.amount ?? 0;
    message.memo = object.memo ?? "";
    message.negotiationDate = object.negotiationDate ?? undefined;
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_EducationRequest(): ResumeUpdateRequest_EducationRequest {
  return {
    id: undefined,
    major: "",
    name: "",
    description: "",
    status: undefined,
    startedAt: undefined,
    endedAt: undefined,
    isVisible: false,
    priority: 0,
  };
}

export const ResumeUpdateRequest_EducationRequest: MessageFns<ResumeUpdateRequest_EducationRequest> = {
  encode(message: ResumeUpdateRequest_EducationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.major !== "") {
      writer.uint32(18).string(message.major);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.status !== undefined) {
      writer.uint32(40).int32(message.status);
    }
    if (message.startedAt !== undefined) {
      writer.uint32(48).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(56).uint64(message.endedAt);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_EducationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_EducationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.major = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_EducationRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      major: isSet(object.major) ? globalThis.String(object.major) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      status: isSet(object.status) ? education_EducationStatusFromJSON(object.status) : undefined,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_EducationRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.status !== undefined) {
      obj.status = education_EducationStatusToJSON(message.status);
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_EducationRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_EducationRequest {
    return ResumeUpdateRequest_EducationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_EducationRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_EducationRequest {
    const message = createBaseResumeUpdateRequest_EducationRequest();
    message.id = object.id ?? undefined;
    message.major = object.major ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.status = object.status ?? undefined;
    message.startedAt = object.startedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_ActivityRequest(): ResumeUpdateRequest_ActivityRequest {
  return {
    id: undefined,
    type: undefined,
    name: "",
    organization: "",
    certificateNumber: "",
    startedAt: undefined,
    endedAt: undefined,
    description: "",
    isVisible: false,
    priority: 0,
  };
}

export const ResumeUpdateRequest_ActivityRequest: MessageFns<ResumeUpdateRequest_ActivityRequest> = {
  encode(message: ResumeUpdateRequest_ActivityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== undefined) {
      writer.uint32(16).int32(message.type);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.organization !== "") {
      writer.uint32(34).string(message.organization);
    }
    if (message.certificateNumber !== "") {
      writer.uint32(42).string(message.certificateNumber);
    }
    if (message.startedAt !== undefined) {
      writer.uint32(48).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(56).uint64(message.endedAt);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_ActivityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_ActivityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.organization = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.certificateNumber = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_ActivityRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      type: isSet(object.type) ? activity_ActivityTypeFromJSON(object.type) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      organization: isSet(object.organization) ? globalThis.String(object.organization) : "",
      certificateNumber: isSet(object.certificateNumber) ? globalThis.String(object.certificateNumber) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_ActivityRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.type !== undefined) {
      obj.type = activity_ActivityTypeToJSON(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.organization !== "") {
      obj.organization = message.organization;
    }
    if (message.certificateNumber !== "") {
      obj.certificateNumber = message.certificateNumber;
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_ActivityRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_ActivityRequest {
    return ResumeUpdateRequest_ActivityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_ActivityRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_ActivityRequest {
    const message = createBaseResumeUpdateRequest_ActivityRequest();
    message.id = object.id ?? undefined;
    message.type = object.type ?? undefined;
    message.name = object.name ?? "";
    message.organization = object.organization ?? "";
    message.certificateNumber = object.certificateNumber ?? "";
    message.startedAt = object.startedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.description = object.description ?? "";
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_LanguageSkillRequest(): ResumeUpdateRequest_LanguageSkillRequest {
  return { id: undefined, language: undefined, level: undefined, isVisible: false, priority: 0, languageTests: [] };
}

export const ResumeUpdateRequest_LanguageSkillRequest: MessageFns<ResumeUpdateRequest_LanguageSkillRequest> = {
  encode(message: ResumeUpdateRequest_LanguageSkillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.language !== undefined) {
      writer.uint32(16).int32(message.language);
    }
    if (message.level !== undefined) {
      writer.uint32(24).int32(message.level);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    for (const v of message.languageTests) {
      ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest.encode(v!, writer.uint32(794).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_LanguageSkillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_LanguageSkillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.language = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int32() as any;
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.languageTests.push(
            ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_LanguageSkillRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      language: isSet(object.language) ? languageSkill_LanguageFromJSON(object.language) : undefined,
      level: isSet(object.level) ? languageSkill_LanguageLevelFromJSON(object.level) : undefined,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      languageTests: globalThis.Array.isArray(object?.languageTests)
        ? object.languageTests.map((e: any) => ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeUpdateRequest_LanguageSkillRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.language !== undefined) {
      obj.language = languageSkill_LanguageToJSON(message.language);
    }
    if (message.level !== undefined) {
      obj.level = languageSkill_LanguageLevelToJSON(message.level);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.languageTests?.length) {
      obj.languageTests = message.languageTests.map((e) =>
        ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_LanguageSkillRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_LanguageSkillRequest {
    return ResumeUpdateRequest_LanguageSkillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_LanguageSkillRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_LanguageSkillRequest {
    const message = createBaseResumeUpdateRequest_LanguageSkillRequest();
    message.id = object.id ?? undefined;
    message.language = object.language ?? undefined;
    message.level = object.level ?? undefined;
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    message.languageTests =
      object.languageTests?.map((e) => ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest(): ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest {
  return { id: undefined, name: "", score: "", acquiredAt: undefined, isVisible: false, priority: 0 };
}

export const ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest: MessageFns<
  ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest
> = {
  encode(
    message: ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.score !== "") {
      writer.uint32(26).string(message.score);
    }
    if (message.acquiredAt !== undefined) {
      writer.uint32(32).uint64(message.acquiredAt);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.score = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.acquiredAt = longToNumber(reader.uint64());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      score: isSet(object.score) ? globalThis.String(object.score) : "",
      acquiredAt: isSet(object.acquiredAt) ? globalThis.Number(object.acquiredAt) : undefined,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.score !== "") {
      obj.score = message.score;
    }
    if (message.acquiredAt !== undefined) {
      obj.acquiredAt = Math.round(message.acquiredAt);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest {
    return ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest {
    const message = createBaseResumeUpdateRequest_LanguageSkillRequest_LanguageTestRequest();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.score = object.score ?? "";
    message.acquiredAt = object.acquiredAt ?? undefined;
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_AttachmentRequest(): ResumeUpdateRequest_AttachmentRequest {
  return {
    id: undefined,
    type: undefined,
    category: 0,
    url: "",
    fileName: "",
    fileUrl: "",
    fileData: undefined,
    isVisible: false,
    priority: 0,
  };
}

export const ResumeUpdateRequest_AttachmentRequest: MessageFns<ResumeUpdateRequest_AttachmentRequest> = {
  encode(message: ResumeUpdateRequest_AttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== undefined) {
      writer.uint32(16).int32(message.type);
    }
    if (message.category !== 0) {
      writer.uint32(24).int32(message.category);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    if (message.fileName !== "") {
      writer.uint32(42).string(message.fileName);
    }
    if (message.fileUrl !== "") {
      writer.uint32(50).string(message.fileUrl);
    }
    if (message.fileData !== undefined) {
      writer.uint32(58).bytes(message.fileData);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_AttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_AttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.category = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fileData = reader.bytes();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_AttachmentRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      type: isSet(object.type) ? attachment_AttachmentTypeFromJSON(object.type) : undefined,
      category: isSet(object.category) ? attachment_AttachmentCategoryFromJSON(object.category) : 0,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      fileUrl: isSet(object.fileUrl) ? globalThis.String(object.fileUrl) : "",
      fileData: isSet(object.fileData) ? bytesFromBase64(object.fileData) : undefined,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_AttachmentRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.type !== undefined) {
      obj.type = attachment_AttachmentTypeToJSON(message.type);
    }
    if (message.category !== 0) {
      obj.category = attachment_AttachmentCategoryToJSON(message.category);
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.fileUrl !== "") {
      obj.fileUrl = message.fileUrl;
    }
    if (message.fileData !== undefined) {
      obj.fileData = base64FromBytes(message.fileData);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_AttachmentRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_AttachmentRequest {
    return ResumeUpdateRequest_AttachmentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_AttachmentRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_AttachmentRequest {
    const message = createBaseResumeUpdateRequest_AttachmentRequest();
    message.id = object.id ?? undefined;
    message.type = object.type ?? undefined;
    message.category = object.category ?? 0;
    message.url = object.url ?? "";
    message.fileName = object.fileName ?? "";
    message.fileUrl = object.fileUrl ?? "";
    message.fileData = object.fileData ?? undefined;
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_ProjectRequest(): ResumeUpdateRequest_ProjectRequest {
  return {
    id: undefined,
    title: "",
    affiliation: "",
    role: "",
    description: "",
    startedAt: undefined,
    endedAt: undefined,
    isVisible: false,
    priority: 0,
  };
}

export const ResumeUpdateRequest_ProjectRequest: MessageFns<ResumeUpdateRequest_ProjectRequest> = {
  encode(message: ResumeUpdateRequest_ProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.affiliation !== "") {
      writer.uint32(26).string(message.affiliation);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.startedAt !== undefined) {
      writer.uint32(48).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(56).uint64(message.endedAt);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    if (message.priority !== 0) {
      writer.uint32(248).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_ProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_ProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.affiliation = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_ProjectRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      affiliation: isSet(object.affiliation) ? globalThis.String(object.affiliation) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_ProjectRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.affiliation !== "") {
      obj.affiliation = message.affiliation;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_ProjectRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_ProjectRequest {
    return ResumeUpdateRequest_ProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_ProjectRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_ProjectRequest {
    const message = createBaseResumeUpdateRequest_ProjectRequest();
    message.id = object.id ?? undefined;
    message.title = object.title ?? "";
    message.affiliation = object.affiliation ?? "";
    message.role = object.role ?? "";
    message.description = object.description ?? "";
    message.startedAt = object.startedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.isVisible = object.isVisible ?? false;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseResumeListResponse(): ResumeListResponse {
  return { resumes: [] };
}

export const ResumeListResponse: MessageFns<ResumeListResponse> = {
  encode(message: ResumeListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resumes) {
      Resume.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumes.push(Resume.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeListResponse {
    return {
      resumes: globalThis.Array.isArray(object?.resumes) ? object.resumes.map((e: any) => Resume.fromJSON(e)) : [],
    };
  },

  toJSON(message: ResumeListResponse): unknown {
    const obj: any = {};
    if (message.resumes?.length) {
      obj.resumes = message.resumes.map((e) => Resume.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeListResponse>, I>>(base?: I): ResumeListResponse {
    return ResumeListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeListResponse>, I>>(object: I): ResumeListResponse {
    const message = createBaseResumeListResponse();
    message.resumes = object.resumes?.map((e) => Resume.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeDetailListResponse(): ResumeDetailListResponse {
  return { resumes: [] };
}

export const ResumeDetailListResponse: MessageFns<ResumeDetailListResponse> = {
  encode(message: ResumeDetailListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resumes) {
      ResumeDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeDetailListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeDetailListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumes.push(ResumeDetail.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeDetailListResponse {
    return {
      resumes: globalThis.Array.isArray(object?.resumes)
        ? object.resumes.map((e: any) => ResumeDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeDetailListResponse): unknown {
    const obj: any = {};
    if (message.resumes?.length) {
      obj.resumes = message.resumes.map((e) => ResumeDetail.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeDetailListResponse>, I>>(base?: I): ResumeDetailListResponse {
    return ResumeDetailListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeDetailListResponse>, I>>(object: I): ResumeDetailListResponse {
    const message = createBaseResumeDetailListResponse();
    message.resumes = object.resumes?.map((e) => ResumeDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeResponse(): ResumeResponse {
  return { resume: undefined };
}

export const ResumeResponse: MessageFns<ResumeResponse> = {
  encode(message: ResumeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resume !== undefined) {
      Resume.encode(message.resume, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resume = Resume.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeResponse {
    return { resume: isSet(object.resume) ? Resume.fromJSON(object.resume) : undefined };
  },

  toJSON(message: ResumeResponse): unknown {
    const obj: any = {};
    if (message.resume !== undefined) {
      obj.resume = Resume.toJSON(message.resume);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeResponse>, I>>(base?: I): ResumeResponse {
    return ResumeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeResponse>, I>>(object: I): ResumeResponse {
    const message = createBaseResumeResponse();
    message.resume = (object.resume !== undefined && object.resume !== null)
      ? Resume.fromPartial(object.resume)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

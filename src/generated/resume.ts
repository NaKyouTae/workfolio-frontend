// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: resume.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Resume, Resume_Gender, resume_GenderFromJSON, resume_GenderToJSON } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface ResumeCreateRequest {
  title: string;
}

export interface ResumeUpdateRequest {
  title: string;
  description: string;
  phone: string;
  email: string;
  birthDate: number;
  gender: Resume_Gender;
  isPublic: boolean;
  isDefault: boolean;
  id: string;
}

export interface ResumeListResponse {
  resumes: Resume[];
}

export interface ResumeResponse {
  resume?: Resume | undefined;
}

function createBaseResumeCreateRequest(): ResumeCreateRequest {
  return { title: "" };
}

export const ResumeCreateRequest: MessageFns<ResumeCreateRequest> = {
  encode(message: ResumeCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeCreateRequest {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: ResumeCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeCreateRequest>, I>>(base?: I): ResumeCreateRequest {
    return ResumeCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeCreateRequest>, I>>(object: I): ResumeCreateRequest {
    const message = createBaseResumeCreateRequest();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseResumeUpdateRequest(): ResumeUpdateRequest {
  return {
    title: "",
    description: "",
    phone: "",
    email: "",
    birthDate: 0,
    gender: 0,
    isPublic: false,
    isDefault: false,
    id: "",
  };
}

export const ResumeUpdateRequest: MessageFns<ResumeUpdateRequest> = {
  encode(message: ResumeUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.phone !== "") {
      writer.uint32(26).string(message.phone);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.birthDate !== 0) {
      writer.uint32(40).uint64(message.birthDate);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    if (message.isPublic !== false) {
      writer.uint32(56).bool(message.isPublic);
    }
    if (message.isDefault !== false) {
      writer.uint32(64).bool(message.isDefault);
    }
    if (message.id !== "") {
      writer.uint32(794).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.birthDate = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      birthDate: isSet(object.birthDate) ? globalThis.Number(object.birthDate) : 0,
      gender: isSet(object.gender) ? resume_GenderFromJSON(object.gender) : 0,
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: ResumeUpdateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.birthDate !== 0) {
      obj.birthDate = Math.round(message.birthDate);
    }
    if (message.gender !== 0) {
      obj.gender = resume_GenderToJSON(message.gender);
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.isDefault !== false) {
      obj.isDefault = message.isDefault;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest>, I>>(base?: I): ResumeUpdateRequest {
    return ResumeUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest>, I>>(object: I): ResumeUpdateRequest {
    const message = createBaseResumeUpdateRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.phone = object.phone ?? "";
    message.email = object.email ?? "";
    message.birthDate = object.birthDate ?? 0;
    message.gender = object.gender ?? 0;
    message.isPublic = object.isPublic ?? false;
    message.isDefault = object.isDefault ?? false;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseResumeListResponse(): ResumeListResponse {
  return { resumes: [] };
}

export const ResumeListResponse: MessageFns<ResumeListResponse> = {
  encode(message: ResumeListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resumes) {
      Resume.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumes.push(Resume.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeListResponse {
    return {
      resumes: globalThis.Array.isArray(object?.resumes) ? object.resumes.map((e: any) => Resume.fromJSON(e)) : [],
    };
  },

  toJSON(message: ResumeListResponse): unknown {
    const obj: any = {};
    if (message.resumes?.length) {
      obj.resumes = message.resumes.map((e) => Resume.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeListResponse>, I>>(base?: I): ResumeListResponse {
    return ResumeListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeListResponse>, I>>(object: I): ResumeListResponse {
    const message = createBaseResumeListResponse();
    message.resumes = object.resumes?.map((e) => Resume.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeResponse(): ResumeResponse {
  return { resume: undefined };
}

export const ResumeResponse: MessageFns<ResumeResponse> = {
  encode(message: ResumeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resume !== undefined) {
      Resume.encode(message.resume, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resume = Resume.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeResponse {
    return { resume: isSet(object.resume) ? Resume.fromJSON(object.resume) : undefined };
  },

  toJSON(message: ResumeResponse): unknown {
    const obj: any = {};
    if (message.resume !== undefined) {
      obj.resume = Resume.toJSON(message.resume);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeResponse>, I>>(base?: I): ResumeResponse {
    return ResumeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeResponse>, I>>(object: I): ResumeResponse {
    const message = createBaseResumeResponse();
    message.resume = (object.resume !== undefined && object.resume !== null)
      ? Resume.fromPartial(object.resume)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

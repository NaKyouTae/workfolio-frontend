// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: resume.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  Degrees_DegreesStatus,
  degrees_DegreesStatusFromJSON,
  degrees_DegreesStatusToJSON,
  Resume,
  Resume_Gender,
  resume_GenderFromJSON,
  resume_GenderToJSON,
  ResumeDetail,
} from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface ResumeCreateRequest {
  title: string;
}

export interface ResumeUpdateRequest {
  id: string;
  title: string;
  description: string;
  phone: string;
  email: string;
  birthDate: number;
  gender: Resume_Gender;
  isPublic: boolean;
  isDefault: boolean;
  degrees: ResumeUpdateRequest_DegreesRequest[];
  careers: ResumeUpdateRequest_CareerRequest[];
  certifications: ResumeUpdateRequest_CertificationsRequest[];
  educations: ResumeUpdateRequest_EducationRequest[];
  links: ResumeUpdateRequest_LinkRequest[];
}

export interface ResumeUpdateRequest_DegreesRequest {
  id?: string | undefined;
  name: string;
  major: string;
  startedAt: number;
  endedAt: number;
  isVisible: boolean;
  status: Degrees_DegreesStatus;
}

export interface ResumeUpdateRequest_CareerRequest {
  career?: ResumeUpdateRequest_CareerRequest_Career | undefined;
  projects: ResumeUpdateRequest_CareerRequest_Project[];
}

export interface ResumeUpdateRequest_CareerRequest_Career {
  id?: string | undefined;
  name: string;
  startedAt: number;
  endedAt: number;
  isWorking: boolean;
  position: string;
  employmentType: ResumeUpdateRequest_CareerRequest_Career_EmploymentType;
  department: string;
  jobGrade: string;
  job: string;
  salary: number;
  isVisible: boolean;
}

export enum ResumeUpdateRequest_CareerRequest_Career_EmploymentType {
  UNKNOWN = 0,
  FULL_TIME = 1,
  CONTRACT = 2,
  INTERN = 3,
  FREELANCER = 4,
  UNRECOGNIZED = -1,
}

export function resumeUpdateRequest_CareerRequest_Career_EmploymentTypeFromJSON(
  object: any,
): ResumeUpdateRequest_CareerRequest_Career_EmploymentType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ResumeUpdateRequest_CareerRequest_Career_EmploymentType.UNKNOWN;
    case 1:
    case "FULL_TIME":
      return ResumeUpdateRequest_CareerRequest_Career_EmploymentType.FULL_TIME;
    case 2:
    case "CONTRACT":
      return ResumeUpdateRequest_CareerRequest_Career_EmploymentType.CONTRACT;
    case 3:
    case "INTERN":
      return ResumeUpdateRequest_CareerRequest_Career_EmploymentType.INTERN;
    case 4:
    case "FREELANCER":
      return ResumeUpdateRequest_CareerRequest_Career_EmploymentType.FREELANCER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResumeUpdateRequest_CareerRequest_Career_EmploymentType.UNRECOGNIZED;
  }
}

export function resumeUpdateRequest_CareerRequest_Career_EmploymentTypeToJSON(
  object: ResumeUpdateRequest_CareerRequest_Career_EmploymentType,
): string {
  switch (object) {
    case ResumeUpdateRequest_CareerRequest_Career_EmploymentType.UNKNOWN:
      return "UNKNOWN";
    case ResumeUpdateRequest_CareerRequest_Career_EmploymentType.FULL_TIME:
      return "FULL_TIME";
    case ResumeUpdateRequest_CareerRequest_Career_EmploymentType.CONTRACT:
      return "CONTRACT";
    case ResumeUpdateRequest_CareerRequest_Career_EmploymentType.INTERN:
      return "INTERN";
    case ResumeUpdateRequest_CareerRequest_Career_EmploymentType.FREELANCER:
      return "FREELANCER";
    case ResumeUpdateRequest_CareerRequest_Career_EmploymentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ResumeUpdateRequest_CareerRequest_Project {
  id?: string | undefined;
  title: string;
  description: string;
  isVisible: boolean;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface ResumeUpdateRequest_CertificationsRequest {
  id?: string | undefined;
  name: string;
  number: string;
  issuer: string;
  issuedAt: number;
  expirationPeriod: number;
  isVisible: boolean;
}

export interface ResumeUpdateRequest_EducationRequest {
  id?: string | undefined;
  name: string;
  startedAt: number;
  endedAt: number;
  agency: string;
  isVisible: boolean;
}

export interface ResumeUpdateRequest_LinkRequest {
  id?: string | undefined;
  url: string;
  isVisible: boolean;
}

export interface ResumeListResponse {
  resumes: Resume[];
}

export interface ResumeDetailListResponse {
  resumes: ResumeDetail[];
}

export interface ResumeResponse {
  resume?: Resume | undefined;
}

function createBaseResumeCreateRequest(): ResumeCreateRequest {
  return { title: "" };
}

export const ResumeCreateRequest: MessageFns<ResumeCreateRequest> = {
  encode(message: ResumeCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeCreateRequest {
    return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
  },

  toJSON(message: ResumeCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeCreateRequest>, I>>(base?: I): ResumeCreateRequest {
    return ResumeCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeCreateRequest>, I>>(object: I): ResumeCreateRequest {
    const message = createBaseResumeCreateRequest();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseResumeUpdateRequest(): ResumeUpdateRequest {
  return {
    id: "",
    title: "",
    description: "",
    phone: "",
    email: "",
    birthDate: 0,
    gender: 0,
    isPublic: false,
    isDefault: false,
    degrees: [],
    careers: [],
    certifications: [],
    educations: [],
    links: [],
  };
}

export const ResumeUpdateRequest: MessageFns<ResumeUpdateRequest> = {
  encode(message: ResumeUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.phone !== "") {
      writer.uint32(34).string(message.phone);
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.birthDate !== 0) {
      writer.uint32(48).uint64(message.birthDate);
    }
    if (message.gender !== 0) {
      writer.uint32(56).int32(message.gender);
    }
    if (message.isPublic !== false) {
      writer.uint32(64).bool(message.isPublic);
    }
    if (message.isDefault !== false) {
      writer.uint32(72).bool(message.isDefault);
    }
    for (const v of message.degrees) {
      ResumeUpdateRequest_DegreesRequest.encode(v!, writer.uint32(402).fork()).join();
    }
    for (const v of message.careers) {
      ResumeUpdateRequest_CareerRequest.encode(v!, writer.uint32(410).fork()).join();
    }
    for (const v of message.certifications) {
      ResumeUpdateRequest_CertificationsRequest.encode(v!, writer.uint32(418).fork()).join();
    }
    for (const v of message.educations) {
      ResumeUpdateRequest_EducationRequest.encode(v!, writer.uint32(426).fork()).join();
    }
    for (const v of message.links) {
      ResumeUpdateRequest_LinkRequest.encode(v!, writer.uint32(434).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.birthDate = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.degrees.push(ResumeUpdateRequest_DegreesRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.careers.push(ResumeUpdateRequest_CareerRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.certifications.push(ResumeUpdateRequest_CertificationsRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.educations.push(ResumeUpdateRequest_EducationRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.links.push(ResumeUpdateRequest_LinkRequest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      birthDate: isSet(object.birthDate) ? globalThis.Number(object.birthDate) : 0,
      gender: isSet(object.gender) ? resume_GenderFromJSON(object.gender) : 0,
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
      degrees: globalThis.Array.isArray(object?.degrees)
        ? object.degrees.map((e: any) => ResumeUpdateRequest_DegreesRequest.fromJSON(e))
        : [],
      careers: globalThis.Array.isArray(object?.careers)
        ? object.careers.map((e: any) => ResumeUpdateRequest_CareerRequest.fromJSON(e))
        : [],
      certifications: globalThis.Array.isArray(object?.certifications)
        ? object.certifications.map((e: any) => ResumeUpdateRequest_CertificationsRequest.fromJSON(e))
        : [],
      educations: globalThis.Array.isArray(object?.educations)
        ? object.educations.map((e: any) => ResumeUpdateRequest_EducationRequest.fromJSON(e))
        : [],
      links: globalThis.Array.isArray(object?.links)
        ? object.links.map((e: any) => ResumeUpdateRequest_LinkRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.birthDate !== 0) {
      obj.birthDate = Math.round(message.birthDate);
    }
    if (message.gender !== 0) {
      obj.gender = resume_GenderToJSON(message.gender);
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.isDefault !== false) {
      obj.isDefault = message.isDefault;
    }
    if (message.degrees?.length) {
      obj.degrees = message.degrees.map((e) => ResumeUpdateRequest_DegreesRequest.toJSON(e));
    }
    if (message.careers?.length) {
      obj.careers = message.careers.map((e) => ResumeUpdateRequest_CareerRequest.toJSON(e));
    }
    if (message.certifications?.length) {
      obj.certifications = message.certifications.map((e) => ResumeUpdateRequest_CertificationsRequest.toJSON(e));
    }
    if (message.educations?.length) {
      obj.educations = message.educations.map((e) => ResumeUpdateRequest_EducationRequest.toJSON(e));
    }
    if (message.links?.length) {
      obj.links = message.links.map((e) => ResumeUpdateRequest_LinkRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest>, I>>(base?: I): ResumeUpdateRequest {
    return ResumeUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest>, I>>(object: I): ResumeUpdateRequest {
    const message = createBaseResumeUpdateRequest();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.phone = object.phone ?? "";
    message.email = object.email ?? "";
    message.birthDate = object.birthDate ?? 0;
    message.gender = object.gender ?? 0;
    message.isPublic = object.isPublic ?? false;
    message.isDefault = object.isDefault ?? false;
    message.degrees = object.degrees?.map((e) => ResumeUpdateRequest_DegreesRequest.fromPartial(e)) || [];
    message.careers = object.careers?.map((e) => ResumeUpdateRequest_CareerRequest.fromPartial(e)) || [];
    message.certifications =
      object.certifications?.map((e) => ResumeUpdateRequest_CertificationsRequest.fromPartial(e)) || [];
    message.educations = object.educations?.map((e) => ResumeUpdateRequest_EducationRequest.fromPartial(e)) || [];
    message.links = object.links?.map((e) => ResumeUpdateRequest_LinkRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeUpdateRequest_DegreesRequest(): ResumeUpdateRequest_DegreesRequest {
  return { id: undefined, name: "", major: "", startedAt: 0, endedAt: 0, isVisible: false, status: 0 };
}

export const ResumeUpdateRequest_DegreesRequest: MessageFns<ResumeUpdateRequest_DegreesRequest> = {
  encode(message: ResumeUpdateRequest_DegreesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.major !== "") {
      writer.uint32(26).string(message.major);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).uint64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(40).uint64(message.endedAt);
    }
    if (message.isVisible !== false) {
      writer.uint32(48).bool(message.isVisible);
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_DegreesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_DegreesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.major = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_DegreesRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      major: isSet(object.major) ? globalThis.String(object.major) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      status: isSet(object.status) ? degrees_DegreesStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: ResumeUpdateRequest_DegreesRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.status !== 0) {
      obj.status = degrees_DegreesStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_DegreesRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_DegreesRequest {
    return ResumeUpdateRequest_DegreesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_DegreesRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_DegreesRequest {
    const message = createBaseResumeUpdateRequest_DegreesRequest();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.major = object.major ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.isVisible = object.isVisible ?? false;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseResumeUpdateRequest_CareerRequest(): ResumeUpdateRequest_CareerRequest {
  return { career: undefined, projects: [] };
}

export const ResumeUpdateRequest_CareerRequest: MessageFns<ResumeUpdateRequest_CareerRequest> = {
  encode(message: ResumeUpdateRequest_CareerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.career !== undefined) {
      ResumeUpdateRequest_CareerRequest_Career.encode(message.career, writer.uint32(10).fork()).join();
    }
    for (const v of message.projects) {
      ResumeUpdateRequest_CareerRequest_Project.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CareerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CareerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.career = ResumeUpdateRequest_CareerRequest_Career.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.projects.push(ResumeUpdateRequest_CareerRequest_Project.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CareerRequest {
    return {
      career: isSet(object.career) ? ResumeUpdateRequest_CareerRequest_Career.fromJSON(object.career) : undefined,
      projects: globalThis.Array.isArray(object?.projects)
        ? object.projects.map((e: any) => ResumeUpdateRequest_CareerRequest_Project.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeUpdateRequest_CareerRequest): unknown {
    const obj: any = {};
    if (message.career !== undefined) {
      obj.career = ResumeUpdateRequest_CareerRequest_Career.toJSON(message.career);
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => ResumeUpdateRequest_CareerRequest_Project.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CareerRequest {
    return ResumeUpdateRequest_CareerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_CareerRequest {
    const message = createBaseResumeUpdateRequest_CareerRequest();
    message.career = (object.career !== undefined && object.career !== null)
      ? ResumeUpdateRequest_CareerRequest_Career.fromPartial(object.career)
      : undefined;
    message.projects = object.projects?.map((e) => ResumeUpdateRequest_CareerRequest_Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeUpdateRequest_CareerRequest_Career(): ResumeUpdateRequest_CareerRequest_Career {
  return {
    id: undefined,
    name: "",
    startedAt: 0,
    endedAt: 0,
    isWorking: false,
    position: "",
    employmentType: 0,
    department: "",
    jobGrade: "",
    job: "",
    salary: 0,
    isVisible: false,
  };
}

export const ResumeUpdateRequest_CareerRequest_Career: MessageFns<ResumeUpdateRequest_CareerRequest_Career> = {
  encode(message: ResumeUpdateRequest_CareerRequest_Career, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.isWorking !== false) {
      writer.uint32(40).bool(message.isWorking);
    }
    if (message.position !== "") {
      writer.uint32(50).string(message.position);
    }
    if (message.employmentType !== 0) {
      writer.uint32(56).int32(message.employmentType);
    }
    if (message.department !== "") {
      writer.uint32(66).string(message.department);
    }
    if (message.jobGrade !== "") {
      writer.uint32(74).string(message.jobGrade);
    }
    if (message.job !== "") {
      writer.uint32(82).string(message.job);
    }
    if (message.salary !== 0) {
      writer.uint32(88).uint32(message.salary);
    }
    if (message.isVisible !== false) {
      writer.uint32(240).bool(message.isVisible);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CareerRequest_Career {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CareerRequest_Career();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isWorking = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.employmentType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.department = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.jobGrade = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.job = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.salary = reader.uint32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CareerRequest_Career {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      isWorking: isSet(object.isWorking) ? globalThis.Boolean(object.isWorking) : false,
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      employmentType: isSet(object.employmentType)
        ? resumeUpdateRequest_CareerRequest_Career_EmploymentTypeFromJSON(object.employmentType)
        : 0,
      department: isSet(object.department) ? globalThis.String(object.department) : "",
      jobGrade: isSet(object.jobGrade) ? globalThis.String(object.jobGrade) : "",
      job: isSet(object.job) ? globalThis.String(object.job) : "",
      salary: isSet(object.salary) ? globalThis.Number(object.salary) : 0,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
    };
  },

  toJSON(message: ResumeUpdateRequest_CareerRequest_Career): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isWorking !== false) {
      obj.isWorking = message.isWorking;
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.employmentType !== 0) {
      obj.employmentType = resumeUpdateRequest_CareerRequest_Career_EmploymentTypeToJSON(message.employmentType);
    }
    if (message.department !== "") {
      obj.department = message.department;
    }
    if (message.jobGrade !== "") {
      obj.jobGrade = message.jobGrade;
    }
    if (message.job !== "") {
      obj.job = message.job;
    }
    if (message.salary !== 0) {
      obj.salary = Math.round(message.salary);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_Career>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CareerRequest_Career {
    return ResumeUpdateRequest_CareerRequest_Career.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_Career>, I>>(
    object: I,
  ): ResumeUpdateRequest_CareerRequest_Career {
    const message = createBaseResumeUpdateRequest_CareerRequest_Career();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.isWorking = object.isWorking ?? false;
    message.position = object.position ?? "";
    message.employmentType = object.employmentType ?? 0;
    message.department = object.department ?? "";
    message.jobGrade = object.jobGrade ?? "";
    message.job = object.job ?? "";
    message.salary = object.salary ?? 0;
    message.isVisible = object.isVisible ?? false;
    return message;
  },
};

function createBaseResumeUpdateRequest_CareerRequest_Project(): ResumeUpdateRequest_CareerRequest_Project {
  return { id: undefined, title: "", description: "", isVisible: false, startedAt: 0, endedAt: undefined };
}

export const ResumeUpdateRequest_CareerRequest_Project: MessageFns<ResumeUpdateRequest_CareerRequest_Project> = {
  encode(message: ResumeUpdateRequest_CareerRequest_Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.isVisible !== false) {
      writer.uint32(32).bool(message.isVisible);
    }
    if (message.startedAt !== 0) {
      writer.uint32(40).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(48).uint64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CareerRequest_Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CareerRequest_Project();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CareerRequest_Project {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: ResumeUpdateRequest_CareerRequest_Project): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_Project>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CareerRequest_Project {
    return ResumeUpdateRequest_CareerRequest_Project.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CareerRequest_Project>, I>>(
    object: I,
  ): ResumeUpdateRequest_CareerRequest_Project {
    const message = createBaseResumeUpdateRequest_CareerRequest_Project();
    message.id = object.id ?? undefined;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.isVisible = object.isVisible ?? false;
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBaseResumeUpdateRequest_CertificationsRequest(): ResumeUpdateRequest_CertificationsRequest {
  return { id: undefined, name: "", number: "", issuer: "", issuedAt: 0, expirationPeriod: 0, isVisible: false };
}

export const ResumeUpdateRequest_CertificationsRequest: MessageFns<ResumeUpdateRequest_CertificationsRequest> = {
  encode(message: ResumeUpdateRequest_CertificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.number !== "") {
      writer.uint32(26).string(message.number);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.issuedAt !== 0) {
      writer.uint32(40).uint64(message.issuedAt);
    }
    if (message.expirationPeriod !== 0) {
      writer.uint32(48).uint64(message.expirationPeriod);
    }
    if (message.isVisible !== false) {
      writer.uint32(56).bool(message.isVisible);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_CertificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_CertificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.issuedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.expirationPeriod = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_CertificationsRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      issuedAt: isSet(object.issuedAt) ? globalThis.Number(object.issuedAt) : 0,
      expirationPeriod: isSet(object.expirationPeriod) ? globalThis.Number(object.expirationPeriod) : 0,
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
    };
  },

  toJSON(message: ResumeUpdateRequest_CertificationsRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.issuedAt !== 0) {
      obj.issuedAt = Math.round(message.issuedAt);
    }
    if (message.expirationPeriod !== 0) {
      obj.expirationPeriod = Math.round(message.expirationPeriod);
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_CertificationsRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_CertificationsRequest {
    return ResumeUpdateRequest_CertificationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_CertificationsRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_CertificationsRequest {
    const message = createBaseResumeUpdateRequest_CertificationsRequest();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.number = object.number ?? "";
    message.issuer = object.issuer ?? "";
    message.issuedAt = object.issuedAt ?? 0;
    message.expirationPeriod = object.expirationPeriod ?? 0;
    message.isVisible = object.isVisible ?? false;
    return message;
  },
};

function createBaseResumeUpdateRequest_EducationRequest(): ResumeUpdateRequest_EducationRequest {
  return { id: undefined, name: "", startedAt: 0, endedAt: 0, agency: "", isVisible: false };
}

export const ResumeUpdateRequest_EducationRequest: MessageFns<ResumeUpdateRequest_EducationRequest> = {
  encode(message: ResumeUpdateRequest_EducationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.agency !== "") {
      writer.uint32(42).string(message.agency);
    }
    if (message.isVisible !== false) {
      writer.uint32(48).bool(message.isVisible);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_EducationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_EducationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_EducationRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      agency: isSet(object.agency) ? globalThis.String(object.agency) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
    };
  },

  toJSON(message: ResumeUpdateRequest_EducationRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_EducationRequest>, I>>(
    base?: I,
  ): ResumeUpdateRequest_EducationRequest {
    return ResumeUpdateRequest_EducationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_EducationRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_EducationRequest {
    const message = createBaseResumeUpdateRequest_EducationRequest();
    message.id = object.id ?? undefined;
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.agency = object.agency ?? "";
    message.isVisible = object.isVisible ?? false;
    return message;
  },
};

function createBaseResumeUpdateRequest_LinkRequest(): ResumeUpdateRequest_LinkRequest {
  return { id: undefined, url: "", isVisible: false };
}

export const ResumeUpdateRequest_LinkRequest: MessageFns<ResumeUpdateRequest_LinkRequest> = {
  encode(message: ResumeUpdateRequest_LinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.isVisible !== false) {
      writer.uint32(24).bool(message.isVisible);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeUpdateRequest_LinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeUpdateRequest_LinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeUpdateRequest_LinkRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
    };
  },

  toJSON(message: ResumeUpdateRequest_LinkRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeUpdateRequest_LinkRequest>, I>>(base?: I): ResumeUpdateRequest_LinkRequest {
    return ResumeUpdateRequest_LinkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeUpdateRequest_LinkRequest>, I>>(
    object: I,
  ): ResumeUpdateRequest_LinkRequest {
    const message = createBaseResumeUpdateRequest_LinkRequest();
    message.id = object.id ?? undefined;
    message.url = object.url ?? "";
    message.isVisible = object.isVisible ?? false;
    return message;
  },
};

function createBaseResumeListResponse(): ResumeListResponse {
  return { resumes: [] };
}

export const ResumeListResponse: MessageFns<ResumeListResponse> = {
  encode(message: ResumeListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resumes) {
      Resume.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumes.push(Resume.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeListResponse {
    return {
      resumes: globalThis.Array.isArray(object?.resumes) ? object.resumes.map((e: any) => Resume.fromJSON(e)) : [],
    };
  },

  toJSON(message: ResumeListResponse): unknown {
    const obj: any = {};
    if (message.resumes?.length) {
      obj.resumes = message.resumes.map((e) => Resume.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeListResponse>, I>>(base?: I): ResumeListResponse {
    return ResumeListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeListResponse>, I>>(object: I): ResumeListResponse {
    const message = createBaseResumeListResponse();
    message.resumes = object.resumes?.map((e) => Resume.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeDetailListResponse(): ResumeDetailListResponse {
  return { resumes: [] };
}

export const ResumeDetailListResponse: MessageFns<ResumeDetailListResponse> = {
  encode(message: ResumeDetailListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resumes) {
      ResumeDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeDetailListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeDetailListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resumes.push(ResumeDetail.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeDetailListResponse {
    return {
      resumes: globalThis.Array.isArray(object?.resumes)
        ? object.resumes.map((e: any) => ResumeDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResumeDetailListResponse): unknown {
    const obj: any = {};
    if (message.resumes?.length) {
      obj.resumes = message.resumes.map((e) => ResumeDetail.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeDetailListResponse>, I>>(base?: I): ResumeDetailListResponse {
    return ResumeDetailListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeDetailListResponse>, I>>(object: I): ResumeDetailListResponse {
    const message = createBaseResumeDetailListResponse();
    message.resumes = object.resumes?.map((e) => ResumeDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResumeResponse(): ResumeResponse {
  return { resume: undefined };
}

export const ResumeResponse: MessageFns<ResumeResponse> = {
  encode(message: ResumeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resume !== undefined) {
      Resume.encode(message.resume, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resume = Resume.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeResponse {
    return { resume: isSet(object.resume) ? Resume.fromJSON(object.resume) : undefined };
  },

  toJSON(message: ResumeResponse): unknown {
    const obj: any = {};
    if (message.resume !== undefined) {
      obj.resume = Resume.toJSON(message.resume);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeResponse>, I>>(base?: I): ResumeResponse {
    return ResumeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeResponse>, I>>(object: I): ResumeResponse {
    const message = createBaseResumeResponse();
    message.resume = (object.resume !== undefined && object.resume !== null)
      ? Resume.fromPartial(object.resume)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

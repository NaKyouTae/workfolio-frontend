// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: interview.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Interview, Interview_Type, interview_TypeFromJSON, interview_TypeToJSON } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface InterviewCreateRequest {
  title?: string | undefined;
  type: Interview_Type;
  startedAt?: number | undefined;
  endedAt?: number | undefined;
  memo?: string | undefined;
  jobSearchCompanyId: string;
}

export interface InterviewUpdateRequest {
  title?: string | undefined;
  type: Interview_Type;
  startedAt?: number | undefined;
  endedAt?: number | undefined;
  memo?: string | undefined;
  id: string;
  jobSearchCompanyId: string;
}

export interface InterviewListResponse {
  interviews: Interview[];
}

export interface InterviewResponse {
  interview?: Interview | undefined;
}

function createBaseInterviewCreateRequest(): InterviewCreateRequest {
  return {
    title: undefined,
    type: 0,
    startedAt: undefined,
    endedAt: undefined,
    memo: undefined,
    jobSearchCompanyId: "",
  };
}

export const InterviewCreateRequest: MessageFns<InterviewCreateRequest> = {
  encode(message: InterviewCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.startedAt !== undefined) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.memo !== undefined) {
      writer.uint32(42).string(message.memo);
    }
    if (message.jobSearchCompanyId !== "") {
      writer.uint32(794).string(message.jobSearchCompanyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterviewCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterviewCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.jobSearchCompanyId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterviewCreateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      type: isSet(object.type) ? interview_TypeFromJSON(object.type) : 0,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : undefined,
      jobSearchCompanyId: isSet(object.jobSearchCompanyId) ? globalThis.String(object.jobSearchCompanyId) : "",
    };
  },

  toJSON(message: InterviewCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.type !== 0) {
      obj.type = interview_TypeToJSON(message.type);
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.memo !== undefined) {
      obj.memo = message.memo;
    }
    if (message.jobSearchCompanyId !== "") {
      obj.jobSearchCompanyId = message.jobSearchCompanyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterviewCreateRequest>, I>>(base?: I): InterviewCreateRequest {
    return InterviewCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterviewCreateRequest>, I>>(object: I): InterviewCreateRequest {
    const message = createBaseInterviewCreateRequest();
    message.title = object.title ?? undefined;
    message.type = object.type ?? 0;
    message.startedAt = object.startedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.memo = object.memo ?? undefined;
    message.jobSearchCompanyId = object.jobSearchCompanyId ?? "";
    return message;
  },
};

function createBaseInterviewUpdateRequest(): InterviewUpdateRequest {
  return {
    title: undefined,
    type: 0,
    startedAt: undefined,
    endedAt: undefined,
    memo: undefined,
    id: "",
    jobSearchCompanyId: "",
  };
}

export const InterviewUpdateRequest: MessageFns<InterviewUpdateRequest> = {
  encode(message: InterviewUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.startedAt !== undefined) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.memo !== undefined) {
      writer.uint32(42).string(message.memo);
    }
    if (message.id !== "") {
      writer.uint32(786).string(message.id);
    }
    if (message.jobSearchCompanyId !== "") {
      writer.uint32(794).string(message.jobSearchCompanyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterviewUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterviewUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 98: {
          if (tag !== 786) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.jobSearchCompanyId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterviewUpdateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      type: isSet(object.type) ? interview_TypeFromJSON(object.type) : 0,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      jobSearchCompanyId: isSet(object.jobSearchCompanyId) ? globalThis.String(object.jobSearchCompanyId) : "",
    };
  },

  toJSON(message: InterviewUpdateRequest): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.type !== 0) {
      obj.type = interview_TypeToJSON(message.type);
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.memo !== undefined) {
      obj.memo = message.memo;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.jobSearchCompanyId !== "") {
      obj.jobSearchCompanyId = message.jobSearchCompanyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterviewUpdateRequest>, I>>(base?: I): InterviewUpdateRequest {
    return InterviewUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterviewUpdateRequest>, I>>(object: I): InterviewUpdateRequest {
    const message = createBaseInterviewUpdateRequest();
    message.title = object.title ?? undefined;
    message.type = object.type ?? 0;
    message.startedAt = object.startedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.memo = object.memo ?? undefined;
    message.id = object.id ?? "";
    message.jobSearchCompanyId = object.jobSearchCompanyId ?? "";
    return message;
  },
};

function createBaseInterviewListResponse(): InterviewListResponse {
  return { interviews: [] };
}

export const InterviewListResponse: MessageFns<InterviewListResponse> = {
  encode(message: InterviewListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.interviews) {
      Interview.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterviewListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterviewListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.interviews.push(Interview.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterviewListResponse {
    return {
      interviews: globalThis.Array.isArray(object?.interviews)
        ? object.interviews.map((e: any) => Interview.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InterviewListResponse): unknown {
    const obj: any = {};
    if (message.interviews?.length) {
      obj.interviews = message.interviews.map((e) => Interview.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterviewListResponse>, I>>(base?: I): InterviewListResponse {
    return InterviewListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterviewListResponse>, I>>(object: I): InterviewListResponse {
    const message = createBaseInterviewListResponse();
    message.interviews = object.interviews?.map((e) => Interview.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInterviewResponse(): InterviewResponse {
  return { interview: undefined };
}

export const InterviewResponse: MessageFns<InterviewResponse> = {
  encode(message: InterviewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.interview !== undefined) {
      Interview.encode(message.interview, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.interview = Interview.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterviewResponse {
    return { interview: isSet(object.interview) ? Interview.fromJSON(object.interview) : undefined };
  },

  toJSON(message: InterviewResponse): unknown {
    const obj: any = {};
    if (message.interview !== undefined) {
      obj.interview = Interview.toJSON(message.interview);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterviewResponse>, I>>(base?: I): InterviewResponse {
    return InterviewResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterviewResponse>, I>>(object: I): InterviewResponse {
    const message = createBaseInterviewResponse();
    message.interview = (object.interview !== undefined && object.interview !== null)
      ? Interview.fromPartial(object.interview)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

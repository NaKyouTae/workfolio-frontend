// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: position.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Position } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface PositionCreateRequest {
  careerId: string;
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface PositionUpdateRequest {
  id: string;
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface PositionListResponse {
  positions: Position[];
}

export interface PositionResponse {
  position?: Position | undefined;
}

function createBasePositionCreateRequest(): PositionCreateRequest {
  return { careerId: "", name: "", startedAt: 0, endedAt: undefined };
}

export const PositionCreateRequest: MessageFns<PositionCreateRequest> = {
  encode(message: PositionCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.careerId !== "") {
      writer.uint32(10).string(message.careerId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PositionCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePositionCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.careerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PositionCreateRequest {
    return {
      careerId: isSet(object.careerId) ? globalThis.String(object.careerId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: PositionCreateRequest): unknown {
    const obj: any = {};
    if (message.careerId !== "") {
      obj.careerId = message.careerId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PositionCreateRequest>, I>>(base?: I): PositionCreateRequest {
    return PositionCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PositionCreateRequest>, I>>(object: I): PositionCreateRequest {
    const message = createBasePositionCreateRequest();
    message.careerId = object.careerId ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBasePositionUpdateRequest(): PositionUpdateRequest {
  return { id: "", name: "", startedAt: 0, endedAt: undefined };
}

export const PositionUpdateRequest: MessageFns<PositionUpdateRequest> = {
  encode(message: PositionUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PositionUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePositionUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PositionUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: PositionUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PositionUpdateRequest>, I>>(base?: I): PositionUpdateRequest {
    return PositionUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PositionUpdateRequest>, I>>(object: I): PositionUpdateRequest {
    const message = createBasePositionUpdateRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBasePositionListResponse(): PositionListResponse {
  return { positions: [] };
}

export const PositionListResponse: MessageFns<PositionListResponse> = {
  encode(message: PositionListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.positions) {
      Position.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PositionListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePositionListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.positions.push(Position.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PositionListResponse {
    return {
      positions: globalThis.Array.isArray(object?.positions)
        ? object.positions.map((e: any) => Position.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PositionListResponse): unknown {
    const obj: any = {};
    if (message.positions?.length) {
      obj.positions = message.positions.map((e) => Position.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PositionListResponse>, I>>(base?: I): PositionListResponse {
    return PositionListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PositionListResponse>, I>>(object: I): PositionListResponse {
    const message = createBasePositionListResponse();
    message.positions = object.positions?.map((e) => Position.fromPartial(e)) || [];
    return message;
  },
};

function createBasePositionResponse(): PositionResponse {
  return { position: undefined };
}

export const PositionResponse: MessageFns<PositionResponse> = {
  encode(message: PositionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PositionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PositionResponse {
    return { position: isSet(object.position) ? Position.fromJSON(object.position) : undefined };
  },

  toJSON(message: PositionResponse): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PositionResponse>, I>>(base?: I): PositionResponse {
    return PositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PositionResponse>, I>>(object: I): PositionResponse {
    const message = createBasePositionResponse();
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

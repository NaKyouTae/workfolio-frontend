// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: project.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Project } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface ProjectCreateRequest {
  title: string;
  description: string;
  isVisible: boolean;
  email: string;
  startedAt: number;
  endedAt?: number | undefined;
  careerId: string;
}

export interface ProjectUpdateRequest {
  title: string;
  description: string;
  isVisible: boolean;
  email: string;
  startedAt: number;
  endedAt?: number | undefined;
  id: string;
}

export interface ProjectListResponse {
  projects: Project[];
}

export interface ProjectResponse {
  project?: Project | undefined;
}

function createBaseProjectCreateRequest(): ProjectCreateRequest {
  return { title: "", description: "", isVisible: false, email: "", startedAt: 0, endedAt: undefined, careerId: "" };
}

export const ProjectCreateRequest: MessageFns<ProjectCreateRequest> = {
  encode(message: ProjectCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.isVisible !== false) {
      writer.uint32(24).bool(message.isVisible);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.startedAt !== 0) {
      writer.uint32(40).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(48).uint64(message.endedAt);
    }
    if (message.careerId !== "") {
      writer.uint32(794).string(message.careerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.careerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectCreateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      careerId: isSet(object.careerId) ? globalThis.String(object.careerId) : "",
    };
  },

  toJSON(message: ProjectCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.careerId !== "") {
      obj.careerId = message.careerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectCreateRequest>, I>>(base?: I): ProjectCreateRequest {
    return ProjectCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectCreateRequest>, I>>(object: I): ProjectCreateRequest {
    const message = createBaseProjectCreateRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.isVisible = object.isVisible ?? false;
    message.email = object.email ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.careerId = object.careerId ?? "";
    return message;
  },
};

function createBaseProjectUpdateRequest(): ProjectUpdateRequest {
  return { title: "", description: "", isVisible: false, email: "", startedAt: 0, endedAt: undefined, id: "" };
}

export const ProjectUpdateRequest: MessageFns<ProjectUpdateRequest> = {
  encode(message: ProjectUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.isVisible !== false) {
      writer.uint32(24).bool(message.isVisible);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.startedAt !== 0) {
      writer.uint32(40).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(48).uint64(message.endedAt);
    }
    if (message.id !== "") {
      writer.uint32(794).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isVisible = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectUpdateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      isVisible: isSet(object.isVisible) ? globalThis.Boolean(object.isVisible) : false,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: ProjectUpdateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.isVisible !== false) {
      obj.isVisible = message.isVisible;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectUpdateRequest>, I>>(base?: I): ProjectUpdateRequest {
    return ProjectUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectUpdateRequest>, I>>(object: I): ProjectUpdateRequest {
    const message = createBaseProjectUpdateRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.isVisible = object.isVisible ?? false;
    message.email = object.email ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseProjectListResponse(): ProjectListResponse {
  return { projects: [] };
}

export const ProjectListResponse: MessageFns<ProjectListResponse> = {
  encode(message: ProjectListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectListResponse {
    return {
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProjectListResponse): unknown {
    const obj: any = {};
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectListResponse>, I>>(base?: I): ProjectListResponse {
    return ProjectListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectListResponse>, I>>(object: I): ProjectListResponse {
    const message = createBaseProjectListResponse();
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProjectResponse(): ProjectResponse {
  return { project: undefined };
}

export const ProjectResponse: MessageFns<ProjectResponse> = {
  encode(message: ProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectResponse {
    return { project: isSet(object.project) ? Project.fromJSON(object.project) : undefined };
  },

  toJSON(message: ProjectResponse): unknown {
    const obj: any = {};
    if (message.project !== undefined) {
      obj.project = Project.toJSON(message.project);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectResponse>, I>>(base?: I): ProjectResponse {
    return ProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectResponse>, I>>(object: I): ProjectResponse {
    const message = createBaseProjectResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

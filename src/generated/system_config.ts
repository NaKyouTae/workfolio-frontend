// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: system_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  SystemConfig,
  SystemConfig_SystemConfigType,
  systemConfig_SystemConfigTypeFromJSON,
  systemConfig_SystemConfigTypeToJSON,
} from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface SystemConfigGetResponse {
  systemConfig?: SystemConfig | undefined;
}

export interface SystemConfigCreateRequest {
  type: SystemConfig_SystemConfigType;
  value: string;
  workerId: string;
}

export interface SystemConfigUpdateRequest {
  id: string;
  type: SystemConfig_SystemConfigType;
  value: string;
}

function createBaseSystemConfigGetResponse(): SystemConfigGetResponse {
  return { systemConfig: undefined };
}

export const SystemConfigGetResponse: MessageFns<SystemConfigGetResponse> = {
  encode(message: SystemConfigGetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.systemConfig !== undefined) {
      SystemConfig.encode(message.systemConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemConfigGetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemConfigGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.systemConfig = SystemConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemConfigGetResponse {
    return { systemConfig: isSet(object.systemConfig) ? SystemConfig.fromJSON(object.systemConfig) : undefined };
  },

  toJSON(message: SystemConfigGetResponse): unknown {
    const obj: any = {};
    if (message.systemConfig !== undefined) {
      obj.systemConfig = SystemConfig.toJSON(message.systemConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemConfigGetResponse>, I>>(base?: I): SystemConfigGetResponse {
    return SystemConfigGetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemConfigGetResponse>, I>>(object: I): SystemConfigGetResponse {
    const message = createBaseSystemConfigGetResponse();
    message.systemConfig = (object.systemConfig !== undefined && object.systemConfig !== null)
      ? SystemConfig.fromPartial(object.systemConfig)
      : undefined;
    return message;
  },
};

function createBaseSystemConfigCreateRequest(): SystemConfigCreateRequest {
  return { type: 0, value: "", workerId: "" };
}

export const SystemConfigCreateRequest: MessageFns<SystemConfigCreateRequest> = {
  encode(message: SystemConfigCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.workerId !== "") {
      writer.uint32(794).string(message.workerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemConfigCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemConfigCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.workerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemConfigCreateRequest {
    return {
      type: isSet(object.type) ? systemConfig_SystemConfigTypeFromJSON(object.type) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
    };
  },

  toJSON(message: SystemConfigCreateRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = systemConfig_SystemConfigTypeToJSON(message.type);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemConfigCreateRequest>, I>>(base?: I): SystemConfigCreateRequest {
    return SystemConfigCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemConfigCreateRequest>, I>>(object: I): SystemConfigCreateRequest {
    const message = createBaseSystemConfigCreateRequest();
    message.type = object.type ?? 0;
    message.value = object.value ?? "";
    message.workerId = object.workerId ?? "";
    return message;
  },
};

function createBaseSystemConfigUpdateRequest(): SystemConfigUpdateRequest {
  return { id: "", type: 0, value: "" };
}

export const SystemConfigUpdateRequest: MessageFns<SystemConfigUpdateRequest> = {
  encode(message: SystemConfigUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemConfigUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemConfigUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemConfigUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? systemConfig_SystemConfigTypeFromJSON(object.type) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SystemConfigUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = systemConfig_SystemConfigTypeToJSON(message.type);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemConfigUpdateRequest>, I>>(base?: I): SystemConfigUpdateRequest {
    return SystemConfigUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemConfigUpdateRequest>, I>>(object: I): SystemConfigUpdateRequest {
    const message = createBaseSystemConfigUpdateRequest();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

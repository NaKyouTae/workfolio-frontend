// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: record.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Record } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface RecordCreateRequest {
  title: string;
  description: string;
  startedAt: number;
  endedAt: number;
  companyId?: string | undefined;
  recordGroupId: string;
}

export interface RecordUpdateRequest {
  title: string;
  description: string;
  startedAt: number;
  endedAt: number;
  companyId?: string | undefined;
  id: string;
}

export interface ListRecordRequest {
  year: number;
  month: number;
  recordGroupIds: string[];
}

export interface ListRecordResponse {
  records: Record[];
}

export interface RecordResponse {
  record?: Record | undefined;
}

function createBaseRecordCreateRequest(): RecordCreateRequest {
  return { title: "", description: "", startedAt: 0, endedAt: 0, companyId: undefined, recordGroupId: "" };
}

export const RecordCreateRequest: MessageFns<RecordCreateRequest> = {
  encode(message: RecordCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(32).int64(message.endedAt);
    }
    if (message.companyId !== undefined) {
      writer.uint32(786).string(message.companyId);
    }
    if (message.recordGroupId !== "") {
      writer.uint32(794).string(message.recordGroupId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 98: {
          if (tag !== 786) {
            break;
          }

          message.companyId = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.recordGroupId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordCreateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : undefined,
      recordGroupId: isSet(object.recordGroupId) ? globalThis.String(object.recordGroupId) : "",
    };
  },

  toJSON(message: RecordCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.companyId !== undefined) {
      obj.companyId = message.companyId;
    }
    if (message.recordGroupId !== "") {
      obj.recordGroupId = message.recordGroupId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordCreateRequest>, I>>(base?: I): RecordCreateRequest {
    return RecordCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordCreateRequest>, I>>(object: I): RecordCreateRequest {
    const message = createBaseRecordCreateRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.companyId = object.companyId ?? undefined;
    message.recordGroupId = object.recordGroupId ?? "";
    return message;
  },
};

function createBaseRecordUpdateRequest(): RecordUpdateRequest {
  return { title: "", description: "", startedAt: 0, endedAt: 0, companyId: undefined, id: "" };
}

export const RecordUpdateRequest: MessageFns<RecordUpdateRequest> = {
  encode(message: RecordUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).int64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(32).int64(message.endedAt);
    }
    if (message.companyId !== undefined) {
      writer.uint32(786).string(message.companyId);
    }
    if (message.id !== "") {
      writer.uint32(794).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.int64());
          continue;
        }
        case 98: {
          if (tag !== 786) {
            break;
          }

          message.companyId = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordUpdateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      companyId: isSet(object.companyId) ? globalThis.String(object.companyId) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: RecordUpdateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.companyId !== undefined) {
      obj.companyId = message.companyId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordUpdateRequest>, I>>(base?: I): RecordUpdateRequest {
    return RecordUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordUpdateRequest>, I>>(object: I): RecordUpdateRequest {
    const message = createBaseRecordUpdateRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.companyId = object.companyId ?? undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListRecordRequest(): ListRecordRequest {
  return { year: 0, month: 0, recordGroupIds: [] };
}

export const ListRecordRequest: MessageFns<ListRecordRequest> = {
  encode(message: ListRecordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.year !== 0) {
      writer.uint32(8).uint64(message.year);
    }
    if (message.month !== 0) {
      writer.uint32(16).uint64(message.month);
    }
    for (const v of message.recordGroupIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.year = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.month = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recordGroupIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecordRequest {
    return {
      year: isSet(object.year) ? globalThis.Number(object.year) : 0,
      month: isSet(object.month) ? globalThis.Number(object.month) : 0,
      recordGroupIds: globalThis.Array.isArray(object?.recordGroupIds)
        ? object.recordGroupIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRecordRequest): unknown {
    const obj: any = {};
    if (message.year !== 0) {
      obj.year = Math.round(message.year);
    }
    if (message.month !== 0) {
      obj.month = Math.round(message.month);
    }
    if (message.recordGroupIds?.length) {
      obj.recordGroupIds = message.recordGroupIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRecordRequest>, I>>(base?: I): ListRecordRequest {
    return ListRecordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRecordRequest>, I>>(object: I): ListRecordRequest {
    const message = createBaseListRecordRequest();
    message.year = object.year ?? 0;
    message.month = object.month ?? 0;
    message.recordGroupIds = object.recordGroupIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseListRecordResponse(): ListRecordResponse {
  return { records: [] };
}

export const ListRecordResponse: MessageFns<ListRecordResponse> = {
  encode(message: ListRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.records) {
      Record.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.records.push(Record.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecordResponse {
    return {
      records: globalThis.Array.isArray(object?.records) ? object.records.map((e: any) => Record.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListRecordResponse): unknown {
    const obj: any = {};
    if (message.records?.length) {
      obj.records = message.records.map((e) => Record.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRecordResponse>, I>>(base?: I): ListRecordResponse {
    return ListRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRecordResponse>, I>>(object: I): ListRecordResponse {
    const message = createBaseListRecordResponse();
    message.records = object.records?.map((e) => Record.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordResponse(): RecordResponse {
  return { record: undefined };
}

export const RecordResponse: MessageFns<RecordResponse> = {
  encode(message: RecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.record !== undefined) {
      Record.encode(message.record, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.record = Record.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordResponse {
    return { record: isSet(object.record) ? Record.fromJSON(object.record) : undefined };
  },

  toJSON(message: RecordResponse): unknown {
    const obj: any = {};
    if (message.record !== undefined) {
      obj.record = Record.toJSON(message.record);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordResponse>, I>>(base?: I): RecordResponse {
    return RecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordResponse>, I>>(object: I): RecordResponse {
    const message = createBaseRecordResponse();
    message.record = (object.record !== undefined && object.record !== null)
      ? Record.fromPartial(object.record)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

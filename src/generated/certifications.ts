// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: certifications.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Certifications } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface CertificationsListResponse {
  certifications: Certifications[];
}

export interface CertificationsCreateRequest {
  name: string;
  number: string;
  issuer: string;
  issuedAt: number;
  expirationPeriod?: number | undefined;
}

export interface CertificationsUpdateRequest {
  id: string;
  name: string;
  number: string;
  issuer: string;
  issuedAt: number;
  expirationPeriod?: number | undefined;
}

export interface CertificationsResponse {
  certifications?: Certifications | undefined;
}

function createBaseCertificationsListResponse(): CertificationsListResponse {
  return { certifications: [] };
}

export const CertificationsListResponse: MessageFns<CertificationsListResponse> = {
  encode(message: CertificationsListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certifications) {
      Certifications.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificationsListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificationsListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.certifications.push(Certifications.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificationsListResponse {
    return {
      certifications: globalThis.Array.isArray(object?.certifications)
        ? object.certifications.map((e: any) => Certifications.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CertificationsListResponse): unknown {
    const obj: any = {};
    if (message.certifications?.length) {
      obj.certifications = message.certifications.map((e) => Certifications.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificationsListResponse>, I>>(base?: I): CertificationsListResponse {
    return CertificationsListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificationsListResponse>, I>>(object: I): CertificationsListResponse {
    const message = createBaseCertificationsListResponse();
    message.certifications = object.certifications?.map((e) => Certifications.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCertificationsCreateRequest(): CertificationsCreateRequest {
  return { name: "", number: "", issuer: "", issuedAt: 0, expirationPeriod: undefined };
}

export const CertificationsCreateRequest: MessageFns<CertificationsCreateRequest> = {
  encode(message: CertificationsCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== "") {
      writer.uint32(18).string(message.number);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.issuedAt !== 0) {
      writer.uint32(32).uint64(message.issuedAt);
    }
    if (message.expirationPeriod !== undefined) {
      writer.uint32(40).uint64(message.expirationPeriod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificationsCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificationsCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.issuedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.expirationPeriod = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificationsCreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      issuedAt: isSet(object.issuedAt) ? globalThis.Number(object.issuedAt) : 0,
      expirationPeriod: isSet(object.expirationPeriod) ? globalThis.Number(object.expirationPeriod) : undefined,
    };
  },

  toJSON(message: CertificationsCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.issuedAt !== 0) {
      obj.issuedAt = Math.round(message.issuedAt);
    }
    if (message.expirationPeriod !== undefined) {
      obj.expirationPeriod = Math.round(message.expirationPeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificationsCreateRequest>, I>>(base?: I): CertificationsCreateRequest {
    return CertificationsCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificationsCreateRequest>, I>>(object: I): CertificationsCreateRequest {
    const message = createBaseCertificationsCreateRequest();
    message.name = object.name ?? "";
    message.number = object.number ?? "";
    message.issuer = object.issuer ?? "";
    message.issuedAt = object.issuedAt ?? 0;
    message.expirationPeriod = object.expirationPeriod ?? undefined;
    return message;
  },
};

function createBaseCertificationsUpdateRequest(): CertificationsUpdateRequest {
  return { id: "", name: "", number: "", issuer: "", issuedAt: 0, expirationPeriod: undefined };
}

export const CertificationsUpdateRequest: MessageFns<CertificationsUpdateRequest> = {
  encode(message: CertificationsUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.number !== "") {
      writer.uint32(26).string(message.number);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.issuedAt !== 0) {
      writer.uint32(40).uint64(message.issuedAt);
    }
    if (message.expirationPeriod !== undefined) {
      writer.uint32(48).uint64(message.expirationPeriod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificationsUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificationsUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.issuedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.expirationPeriod = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificationsUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      issuedAt: isSet(object.issuedAt) ? globalThis.Number(object.issuedAt) : 0,
      expirationPeriod: isSet(object.expirationPeriod) ? globalThis.Number(object.expirationPeriod) : undefined,
    };
  },

  toJSON(message: CertificationsUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.issuedAt !== 0) {
      obj.issuedAt = Math.round(message.issuedAt);
    }
    if (message.expirationPeriod !== undefined) {
      obj.expirationPeriod = Math.round(message.expirationPeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificationsUpdateRequest>, I>>(base?: I): CertificationsUpdateRequest {
    return CertificationsUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificationsUpdateRequest>, I>>(object: I): CertificationsUpdateRequest {
    const message = createBaseCertificationsUpdateRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.number = object.number ?? "";
    message.issuer = object.issuer ?? "";
    message.issuedAt = object.issuedAt ?? 0;
    message.expirationPeriod = object.expirationPeriod ?? undefined;
    return message;
  },
};

function createBaseCertificationsResponse(): CertificationsResponse {
  return { certifications: undefined };
}

export const CertificationsResponse: MessageFns<CertificationsResponse> = {
  encode(message: CertificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certifications !== undefined) {
      Certifications.encode(message.certifications, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.certifications = Certifications.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificationsResponse {
    return {
      certifications: isSet(object.certifications) ? Certifications.fromJSON(object.certifications) : undefined,
    };
  },

  toJSON(message: CertificationsResponse): unknown {
    const obj: any = {};
    if (message.certifications !== undefined) {
      obj.certifications = Certifications.toJSON(message.certifications);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificationsResponse>, I>>(base?: I): CertificationsResponse {
    return CertificationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificationsResponse>, I>>(object: I): CertificationsResponse {
    const message = createBaseCertificationsResponse();
    message.certifications = (object.certifications !== undefined && object.certifications !== null)
      ? Certifications.fromPartial(object.certifications)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

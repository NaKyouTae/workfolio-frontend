// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: education.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Education } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface EducationListResponse {
  educations: Education[];
}

export interface EducationCreateRequest {
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
  agency: string;
  resumeId: string;
}

export interface EducationUpdateRequest {
  id: string;
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
  agency: string;
}

export interface EducationResponse {
  education?: Education | undefined;
}

function createBaseEducationListResponse(): EducationListResponse {
  return { educations: [] };
}

export const EducationListResponse: MessageFns<EducationListResponse> = {
  encode(message: EducationListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.educations) {
      Education.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EducationListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEducationListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.educations.push(Education.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EducationListResponse {
    return {
      educations: globalThis.Array.isArray(object?.educations)
        ? object.educations.map((e: any) => Education.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EducationListResponse): unknown {
    const obj: any = {};
    if (message.educations?.length) {
      obj.educations = message.educations.map((e) => Education.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EducationListResponse>, I>>(base?: I): EducationListResponse {
    return EducationListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EducationListResponse>, I>>(object: I): EducationListResponse {
    const message = createBaseEducationListResponse();
    message.educations = object.educations?.map((e) => Education.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEducationCreateRequest(): EducationCreateRequest {
  return { name: "", startedAt: 0, endedAt: undefined, agency: "", resumeId: "" };
}

export const EducationCreateRequest: MessageFns<EducationCreateRequest> = {
  encode(message: EducationCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    if (message.agency !== "") {
      writer.uint32(34).string(message.agency);
    }
    if (message.resumeId !== "") {
      writer.uint32(794).string(message.resumeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EducationCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEducationCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EducationCreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      agency: isSet(object.agency) ? globalThis.String(object.agency) : "",
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
    };
  },

  toJSON(message: EducationCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EducationCreateRequest>, I>>(base?: I): EducationCreateRequest {
    return EducationCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EducationCreateRequest>, I>>(object: I): EducationCreateRequest {
    const message = createBaseEducationCreateRequest();
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.agency = object.agency ?? "";
    message.resumeId = object.resumeId ?? "";
    return message;
  },
};

function createBaseEducationUpdateRequest(): EducationUpdateRequest {
  return { id: "", name: "", startedAt: 0, endedAt: undefined, agency: "" };
}

export const EducationUpdateRequest: MessageFns<EducationUpdateRequest> = {
  encode(message: EducationUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.agency !== "") {
      writer.uint32(42).string(message.agency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EducationUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEducationUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EducationUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      agency: isSet(object.agency) ? globalThis.String(object.agency) : "",
    };
  },

  toJSON(message: EducationUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EducationUpdateRequest>, I>>(base?: I): EducationUpdateRequest {
    return EducationUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EducationUpdateRequest>, I>>(object: I): EducationUpdateRequest {
    const message = createBaseEducationUpdateRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.agency = object.agency ?? "";
    return message;
  },
};

function createBaseEducationResponse(): EducationResponse {
  return { education: undefined };
}

export const EducationResponse: MessageFns<EducationResponse> = {
  encode(message: EducationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.education !== undefined) {
      Education.encode(message.education, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EducationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEducationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.education = Education.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EducationResponse {
    return { education: isSet(object.education) ? Education.fromJSON(object.education) : undefined };
  },

  toJSON(message: EducationResponse): unknown {
    const obj: any = {};
    if (message.education !== undefined) {
      obj.education = Education.toJSON(message.education);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EducationResponse>, I>>(base?: I): EducationResponse {
    return EducationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EducationResponse>, I>>(object: I): EducationResponse {
    const message = createBaseEducationResponse();
    message.education = (object.education !== undefined && object.education !== null)
      ? Education.fromPartial(object.education)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: degrees.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Degrees } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface DegreesListResponse {
  degrees: Degrees[];
}

export interface DegreesCreateRequest {
  name: string;
  major: string;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface DegreesUpdateRequest {
  id: string;
  name: string;
  major: string;
  startedAt: number;
  endedAt?: number | undefined;
}

function createBaseDegreesListResponse(): DegreesListResponse {
  return { degrees: [] };
}

export const DegreesListResponse: MessageFns<DegreesListResponse> = {
  encode(message: DegreesListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.degrees) {
      Degrees.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DegreesListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDegreesListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.degrees.push(Degrees.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DegreesListResponse {
    return {
      degrees: globalThis.Array.isArray(object?.degrees) ? object.degrees.map((e: any) => Degrees.fromJSON(e)) : [],
    };
  },

  toJSON(message: DegreesListResponse): unknown {
    const obj: any = {};
    if (message.degrees?.length) {
      obj.degrees = message.degrees.map((e) => Degrees.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DegreesListResponse>, I>>(base?: I): DegreesListResponse {
    return DegreesListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DegreesListResponse>, I>>(object: I): DegreesListResponse {
    const message = createBaseDegreesListResponse();
    message.degrees = object.degrees?.map((e) => Degrees.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDegreesCreateRequest(): DegreesCreateRequest {
  return { name: "", major: "", startedAt: 0, endedAt: undefined };
}

export const DegreesCreateRequest: MessageFns<DegreesCreateRequest> = {
  encode(message: DegreesCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.major !== "") {
      writer.uint32(18).string(message.major);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DegreesCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDegreesCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.major = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DegreesCreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      major: isSet(object.major) ? globalThis.String(object.major) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: DegreesCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DegreesCreateRequest>, I>>(base?: I): DegreesCreateRequest {
    return DegreesCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DegreesCreateRequest>, I>>(object: I): DegreesCreateRequest {
    const message = createBaseDegreesCreateRequest();
    message.name = object.name ?? "";
    message.major = object.major ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBaseDegreesUpdateRequest(): DegreesUpdateRequest {
  return { id: "", name: "", major: "", startedAt: 0, endedAt: undefined };
}

export const DegreesUpdateRequest: MessageFns<DegreesUpdateRequest> = {
  encode(message: DegreesUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.major !== "") {
      writer.uint32(26).string(message.major);
    }
    if (message.startedAt !== 0) {
      writer.uint32(32).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(40).uint64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DegreesUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDegreesUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.major = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DegreesUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      major: isSet(object.major) ? globalThis.String(object.major) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: DegreesUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DegreesUpdateRequest>, I>>(base?: I): DegreesUpdateRequest {
    return DegreesUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DegreesUpdateRequest>, I>>(object: I): DegreesUpdateRequest {
    const message = createBaseDegreesUpdateRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.major = object.major ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

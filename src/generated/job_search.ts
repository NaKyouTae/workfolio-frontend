// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: job_search.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { JobSearch } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface JobSearchCreateRequest {
  title: string;
  startedAt: number;
  endedAt?: number | undefined;
  prevCareerId?: string | undefined;
  nextCareerId?: string | undefined;
  memo?: string | undefined;
}

export interface JobSearchUpdateRequest {
  title: string;
  startedAt: number;
  endedAt?: number | undefined;
  prevCareerId?: string | undefined;
  nextCareerId?: string | undefined;
  memo?: string | undefined;
  id: string;
}

export interface JobSearchListResponse {
  jobSearches: JobSearch[];
}

export interface JobSearchResponse {
  jobSearch?: JobSearch | undefined;
}

function createBaseJobSearchCreateRequest(): JobSearchCreateRequest {
  return {
    title: "",
    startedAt: 0,
    endedAt: undefined,
    prevCareerId: undefined,
    nextCareerId: undefined,
    memo: undefined,
  };
}

export const JobSearchCreateRequest: MessageFns<JobSearchCreateRequest> = {
  encode(message: JobSearchCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    if (message.prevCareerId !== undefined) {
      writer.uint32(34).string(message.prevCareerId);
    }
    if (message.nextCareerId !== undefined) {
      writer.uint32(42).string(message.nextCareerId);
    }
    if (message.memo !== undefined) {
      writer.uint32(50).string(message.memo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.prevCareerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nextCareerId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchCreateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      prevCareerId: isSet(object.prevCareerId) ? globalThis.String(object.prevCareerId) : undefined,
      nextCareerId: isSet(object.nextCareerId) ? globalThis.String(object.nextCareerId) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : undefined,
    };
  },

  toJSON(message: JobSearchCreateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.prevCareerId !== undefined) {
      obj.prevCareerId = message.prevCareerId;
    }
    if (message.nextCareerId !== undefined) {
      obj.nextCareerId = message.nextCareerId;
    }
    if (message.memo !== undefined) {
      obj.memo = message.memo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchCreateRequest>, I>>(base?: I): JobSearchCreateRequest {
    return JobSearchCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchCreateRequest>, I>>(object: I): JobSearchCreateRequest {
    const message = createBaseJobSearchCreateRequest();
    message.title = object.title ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.prevCareerId = object.prevCareerId ?? undefined;
    message.nextCareerId = object.nextCareerId ?? undefined;
    message.memo = object.memo ?? undefined;
    return message;
  },
};

function createBaseJobSearchUpdateRequest(): JobSearchUpdateRequest {
  return {
    title: "",
    startedAt: 0,
    endedAt: undefined,
    prevCareerId: undefined,
    nextCareerId: undefined,
    memo: undefined,
    id: "",
  };
}

export const JobSearchUpdateRequest: MessageFns<JobSearchUpdateRequest> = {
  encode(message: JobSearchUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    if (message.prevCareerId !== undefined) {
      writer.uint32(34).string(message.prevCareerId);
    }
    if (message.nextCareerId !== undefined) {
      writer.uint32(42).string(message.nextCareerId);
    }
    if (message.memo !== undefined) {
      writer.uint32(50).string(message.memo);
    }
    if (message.id !== "") {
      writer.uint32(794).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.prevCareerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nextCareerId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchUpdateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      prevCareerId: isSet(object.prevCareerId) ? globalThis.String(object.prevCareerId) : undefined,
      nextCareerId: isSet(object.nextCareerId) ? globalThis.String(object.nextCareerId) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: JobSearchUpdateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.prevCareerId !== undefined) {
      obj.prevCareerId = message.prevCareerId;
    }
    if (message.nextCareerId !== undefined) {
      obj.nextCareerId = message.nextCareerId;
    }
    if (message.memo !== undefined) {
      obj.memo = message.memo;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchUpdateRequest>, I>>(base?: I): JobSearchUpdateRequest {
    return JobSearchUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchUpdateRequest>, I>>(object: I): JobSearchUpdateRequest {
    const message = createBaseJobSearchUpdateRequest();
    message.title = object.title ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.prevCareerId = object.prevCareerId ?? undefined;
    message.nextCareerId = object.nextCareerId ?? undefined;
    message.memo = object.memo ?? undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseJobSearchListResponse(): JobSearchListResponse {
  return { jobSearches: [] };
}

export const JobSearchListResponse: MessageFns<JobSearchListResponse> = {
  encode(message: JobSearchListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobSearches) {
      JobSearch.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobSearches.push(JobSearch.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchListResponse {
    return {
      jobSearches: globalThis.Array.isArray(object?.jobSearches)
        ? object.jobSearches.map((e: any) => JobSearch.fromJSON(e))
        : [],
    };
  },

  toJSON(message: JobSearchListResponse): unknown {
    const obj: any = {};
    if (message.jobSearches?.length) {
      obj.jobSearches = message.jobSearches.map((e) => JobSearch.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchListResponse>, I>>(base?: I): JobSearchListResponse {
    return JobSearchListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchListResponse>, I>>(object: I): JobSearchListResponse {
    const message = createBaseJobSearchListResponse();
    message.jobSearches = object.jobSearches?.map((e) => JobSearch.fromPartial(e)) || [];
    return message;
  },
};

function createBaseJobSearchResponse(): JobSearchResponse {
  return { jobSearch: undefined };
}

export const JobSearchResponse: MessageFns<JobSearchResponse> = {
  encode(message: JobSearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobSearch !== undefined) {
      JobSearch.encode(message.jobSearch, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobSearch = JobSearch.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchResponse {
    return { jobSearch: isSet(object.jobSearch) ? JobSearch.fromJSON(object.jobSearch) : undefined };
  },

  toJSON(message: JobSearchResponse): unknown {
    const obj: any = {};
    if (message.jobSearch !== undefined) {
      obj.jobSearch = JobSearch.toJSON(message.jobSearch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchResponse>, I>>(base?: I): JobSearchResponse {
    return JobSearchResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchResponse>, I>>(object: I): JobSearchResponse {
    const message = createBaseJobSearchResponse();
    message.jobSearch = (object.jobSearch !== undefined && object.jobSearch !== null)
      ? JobSearch.fromPartial(object.jobSearch)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

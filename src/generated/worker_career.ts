// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: worker_career.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Certifications, Company, Degrees, Education } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface WorkerCareerUpdateRequest {
  companies: WorkerCareerUpdateRequest_WorkerCompany[];
  certifications: WorkerCareerUpdateRequest_WorkerCertifications[];
  degrees: WorkerCareerUpdateRequest_WorkerDegrees[];
  educations: WorkerCareerUpdateRequest_WorkerEducation[];
}

export interface WorkerCareerUpdateRequest_WorkerCompany {
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
  isWorking: boolean;
  positions: WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition[];
  salaries: WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary[];
}

export interface WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition {
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary {
  amount: number;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface WorkerCareerUpdateRequest_WorkerCertifications {
  name: string;
  number: string;
  issuer: string;
  issuedAt: number;
  expirationPeriod?: number | undefined;
}

export interface WorkerCareerUpdateRequest_WorkerDegrees {
  name: string;
  major: string;
  startedAt: number;
  endedAt?: number | undefined;
}

export interface WorkerCareerUpdateRequest_WorkerEducation {
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
  agency: string;
}

export interface WorkerCareerListResponse {
  companies: Company[];
  certifications: Certifications[];
  degrees: Degrees[];
  educations: Education[];
}

function createBaseWorkerCareerUpdateRequest(): WorkerCareerUpdateRequest {
  return { companies: [], certifications: [], degrees: [], educations: [] };
}

export const WorkerCareerUpdateRequest: MessageFns<WorkerCareerUpdateRequest> = {
  encode(message: WorkerCareerUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.companies) {
      WorkerCareerUpdateRequest_WorkerCompany.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.certifications) {
      WorkerCareerUpdateRequest_WorkerCertifications.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.degrees) {
      WorkerCareerUpdateRequest_WorkerDegrees.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.educations) {
      WorkerCareerUpdateRequest_WorkerEducation.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerCareerUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.companies.push(WorkerCareerUpdateRequest_WorkerCompany.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.certifications.push(WorkerCareerUpdateRequest_WorkerCertifications.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.degrees.push(WorkerCareerUpdateRequest_WorkerDegrees.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.educations.push(WorkerCareerUpdateRequest_WorkerEducation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest {
    return {
      companies: globalThis.Array.isArray(object?.companies)
        ? object.companies.map((e: any) => WorkerCareerUpdateRequest_WorkerCompany.fromJSON(e))
        : [],
      certifications: globalThis.Array.isArray(object?.certifications)
        ? object.certifications.map((e: any) => WorkerCareerUpdateRequest_WorkerCertifications.fromJSON(e))
        : [],
      degrees: globalThis.Array.isArray(object?.degrees)
        ? object.degrees.map((e: any) => WorkerCareerUpdateRequest_WorkerDegrees.fromJSON(e))
        : [],
      educations: globalThis.Array.isArray(object?.educations)
        ? object.educations.map((e: any) => WorkerCareerUpdateRequest_WorkerEducation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WorkerCareerUpdateRequest): unknown {
    const obj: any = {};
    if (message.companies?.length) {
      obj.companies = message.companies.map((e) => WorkerCareerUpdateRequest_WorkerCompany.toJSON(e));
    }
    if (message.certifications?.length) {
      obj.certifications = message.certifications.map((e) => WorkerCareerUpdateRequest_WorkerCertifications.toJSON(e));
    }
    if (message.degrees?.length) {
      obj.degrees = message.degrees.map((e) => WorkerCareerUpdateRequest_WorkerDegrees.toJSON(e));
    }
    if (message.educations?.length) {
      obj.educations = message.educations.map((e) => WorkerCareerUpdateRequest_WorkerEducation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest>, I>>(base?: I): WorkerCareerUpdateRequest {
    return WorkerCareerUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest>, I>>(object: I): WorkerCareerUpdateRequest {
    const message = createBaseWorkerCareerUpdateRequest();
    message.companies = object.companies?.map((e) => WorkerCareerUpdateRequest_WorkerCompany.fromPartial(e)) || [];
    message.certifications =
      object.certifications?.map((e) => WorkerCareerUpdateRequest_WorkerCertifications.fromPartial(e)) || [];
    message.degrees = object.degrees?.map((e) => WorkerCareerUpdateRequest_WorkerDegrees.fromPartial(e)) || [];
    message.educations = object.educations?.map((e) => WorkerCareerUpdateRequest_WorkerEducation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWorkerCareerUpdateRequest_WorkerCompany(): WorkerCareerUpdateRequest_WorkerCompany {
  return { name: "", startedAt: 0, endedAt: undefined, isWorking: false, positions: [], salaries: [] };
}

export const WorkerCareerUpdateRequest_WorkerCompany: MessageFns<WorkerCareerUpdateRequest_WorkerCompany> = {
  encode(message: WorkerCareerUpdateRequest_WorkerCompany, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    if (message.isWorking !== false) {
      writer.uint32(32).bool(message.isWorking);
    }
    for (const v of message.positions) {
      WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.salaries) {
      WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerCareerUpdateRequest_WorkerCompany {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest_WorkerCompany();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isWorking = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.positions.push(
            WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.salaries.push(
            WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest_WorkerCompany {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      isWorking: isSet(object.isWorking) ? globalThis.Boolean(object.isWorking) : false,
      positions: globalThis.Array.isArray(object?.positions)
        ? object.positions.map((e: any) => WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition.fromJSON(e))
        : [],
      salaries: globalThis.Array.isArray(object?.salaries)
        ? object.salaries.map((e: any) => WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WorkerCareerUpdateRequest_WorkerCompany): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isWorking !== false) {
      obj.isWorking = message.isWorking;
    }
    if (message.positions?.length) {
      obj.positions = message.positions.map((e) =>
        WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition.toJSON(e)
      );
    }
    if (message.salaries?.length) {
      obj.salaries = message.salaries.map((e) => WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCompany>, I>>(
    base?: I,
  ): WorkerCareerUpdateRequest_WorkerCompany {
    return WorkerCareerUpdateRequest_WorkerCompany.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCompany>, I>>(
    object: I,
  ): WorkerCareerUpdateRequest_WorkerCompany {
    const message = createBaseWorkerCareerUpdateRequest_WorkerCompany();
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.isWorking = object.isWorking ?? false;
    message.positions =
      object.positions?.map((e) => WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition.fromPartial(e)) || [];
    message.salaries =
      object.salaries?.map((e) => WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition(): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition {
  return { name: "", startedAt: 0, endedAt: undefined };
}

export const WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition: MessageFns<
  WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition
> = {
  encode(
    message: WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition>, I>>(
    base?: I,
  ): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition {
    return WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition>, I>>(
    object: I,
  ): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition {
    const message = createBaseWorkerCareerUpdateRequest_WorkerCompany_WorkerCompanyPosition();
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBaseWorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary(): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary {
  return { amount: 0, startedAt: 0, endedAt: undefined };
}

export const WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary: MessageFns<
  WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary
> = {
  encode(
    message: WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).uint64(message.amount);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary {
    return {
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary>, I>>(
    base?: I,
  ): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary {
    return WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary>, I>>(
    object: I,
  ): WorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary {
    const message = createBaseWorkerCareerUpdateRequest_WorkerCompany_WorkerCompanySalary();
    message.amount = object.amount ?? 0;
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBaseWorkerCareerUpdateRequest_WorkerCertifications(): WorkerCareerUpdateRequest_WorkerCertifications {
  return { name: "", number: "", issuer: "", issuedAt: 0, expirationPeriod: undefined };
}

export const WorkerCareerUpdateRequest_WorkerCertifications: MessageFns<
  WorkerCareerUpdateRequest_WorkerCertifications
> = {
  encode(
    message: WorkerCareerUpdateRequest_WorkerCertifications,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== "") {
      writer.uint32(18).string(message.number);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.issuedAt !== 0) {
      writer.uint32(32).uint64(message.issuedAt);
    }
    if (message.expirationPeriod !== undefined) {
      writer.uint32(40).uint64(message.expirationPeriod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerCareerUpdateRequest_WorkerCertifications {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest_WorkerCertifications();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.issuedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.expirationPeriod = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest_WorkerCertifications {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      issuedAt: isSet(object.issuedAt) ? globalThis.Number(object.issuedAt) : 0,
      expirationPeriod: isSet(object.expirationPeriod) ? globalThis.Number(object.expirationPeriod) : undefined,
    };
  },

  toJSON(message: WorkerCareerUpdateRequest_WorkerCertifications): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.issuedAt !== 0) {
      obj.issuedAt = Math.round(message.issuedAt);
    }
    if (message.expirationPeriod !== undefined) {
      obj.expirationPeriod = Math.round(message.expirationPeriod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCertifications>, I>>(
    base?: I,
  ): WorkerCareerUpdateRequest_WorkerCertifications {
    return WorkerCareerUpdateRequest_WorkerCertifications.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerCertifications>, I>>(
    object: I,
  ): WorkerCareerUpdateRequest_WorkerCertifications {
    const message = createBaseWorkerCareerUpdateRequest_WorkerCertifications();
    message.name = object.name ?? "";
    message.number = object.number ?? "";
    message.issuer = object.issuer ?? "";
    message.issuedAt = object.issuedAt ?? 0;
    message.expirationPeriod = object.expirationPeriod ?? undefined;
    return message;
  },
};

function createBaseWorkerCareerUpdateRequest_WorkerDegrees(): WorkerCareerUpdateRequest_WorkerDegrees {
  return { name: "", major: "", startedAt: 0, endedAt: undefined };
}

export const WorkerCareerUpdateRequest_WorkerDegrees: MessageFns<WorkerCareerUpdateRequest_WorkerDegrees> = {
  encode(message: WorkerCareerUpdateRequest_WorkerDegrees, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.major !== "") {
      writer.uint32(18).string(message.major);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerCareerUpdateRequest_WorkerDegrees {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest_WorkerDegrees();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.major = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest_WorkerDegrees {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      major: isSet(object.major) ? globalThis.String(object.major) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
    };
  },

  toJSON(message: WorkerCareerUpdateRequest_WorkerDegrees): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.major !== "") {
      obj.major = message.major;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerDegrees>, I>>(
    base?: I,
  ): WorkerCareerUpdateRequest_WorkerDegrees {
    return WorkerCareerUpdateRequest_WorkerDegrees.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerDegrees>, I>>(
    object: I,
  ): WorkerCareerUpdateRequest_WorkerDegrees {
    const message = createBaseWorkerCareerUpdateRequest_WorkerDegrees();
    message.name = object.name ?? "";
    message.major = object.major ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    return message;
  },
};

function createBaseWorkerCareerUpdateRequest_WorkerEducation(): WorkerCareerUpdateRequest_WorkerEducation {
  return { name: "", startedAt: 0, endedAt: undefined, agency: "" };
}

export const WorkerCareerUpdateRequest_WorkerEducation: MessageFns<WorkerCareerUpdateRequest_WorkerEducation> = {
  encode(message: WorkerCareerUpdateRequest_WorkerEducation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(24).uint64(message.endedAt);
    }
    if (message.agency !== "") {
      writer.uint32(34).string(message.agency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerCareerUpdateRequest_WorkerEducation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerUpdateRequest_WorkerEducation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.agency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerUpdateRequest_WorkerEducation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      agency: isSet(object.agency) ? globalThis.String(object.agency) : "",
    };
  },

  toJSON(message: WorkerCareerUpdateRequest_WorkerEducation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.agency !== "") {
      obj.agency = message.agency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerEducation>, I>>(
    base?: I,
  ): WorkerCareerUpdateRequest_WorkerEducation {
    return WorkerCareerUpdateRequest_WorkerEducation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerUpdateRequest_WorkerEducation>, I>>(
    object: I,
  ): WorkerCareerUpdateRequest_WorkerEducation {
    const message = createBaseWorkerCareerUpdateRequest_WorkerEducation();
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.agency = object.agency ?? "";
    return message;
  },
};

function createBaseWorkerCareerListResponse(): WorkerCareerListResponse {
  return { companies: [], certifications: [], degrees: [], educations: [] };
}

export const WorkerCareerListResponse: MessageFns<WorkerCareerListResponse> = {
  encode(message: WorkerCareerListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.companies) {
      Company.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.certifications) {
      Certifications.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.degrees) {
      Degrees.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.educations) {
      Education.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerCareerListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerCareerListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.companies.push(Company.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.certifications.push(Certifications.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.degrees.push(Degrees.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.educations.push(Education.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerCareerListResponse {
    return {
      companies: globalThis.Array.isArray(object?.companies)
        ? object.companies.map((e: any) => Company.fromJSON(e))
        : [],
      certifications: globalThis.Array.isArray(object?.certifications)
        ? object.certifications.map((e: any) => Certifications.fromJSON(e))
        : [],
      degrees: globalThis.Array.isArray(object?.degrees) ? object.degrees.map((e: any) => Degrees.fromJSON(e)) : [],
      educations: globalThis.Array.isArray(object?.educations)
        ? object.educations.map((e: any) => Education.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WorkerCareerListResponse): unknown {
    const obj: any = {};
    if (message.companies?.length) {
      obj.companies = message.companies.map((e) => Company.toJSON(e));
    }
    if (message.certifications?.length) {
      obj.certifications = message.certifications.map((e) => Certifications.toJSON(e));
    }
    if (message.degrees?.length) {
      obj.degrees = message.degrees.map((e) => Degrees.toJSON(e));
    }
    if (message.educations?.length) {
      obj.educations = message.educations.map((e) => Education.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerCareerListResponse>, I>>(base?: I): WorkerCareerListResponse {
    return WorkerCareerListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerCareerListResponse>, I>>(object: I): WorkerCareerListResponse {
    const message = createBaseWorkerCareerListResponse();
    message.companies = object.companies?.map((e) => Company.fromPartial(e)) || [];
    message.certifications = object.certifications?.map((e) => Certifications.fromPartial(e)) || [];
    message.degrees = object.degrees?.map((e) => Degrees.fromPartial(e)) || [];
    message.educations = object.educations?.map((e) => Education.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

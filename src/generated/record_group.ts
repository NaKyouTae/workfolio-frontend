// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: record_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  RecordGroup,
  RecordGroup_RecordGroupType,
  recordGroup_RecordGroupTypeFromJSON,
  recordGroup_RecordGroupTypeToJSON,
  Worker,
} from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface CreateRecordGroupRequest {
  title: string;
  color: string;
  type: RecordGroup_RecordGroupType;
  priority: number;
}

export interface RecordGroupListResponse {
  groups: RecordGroup[];
}

export interface RecordGroupDetailResponse {
  groups?: RecordGroup | undefined;
  workers: Worker[];
}

export interface RecordGroupJoinRequest {
  recordGroupId: string;
  workerId: string;
}

export interface RecordGroupUpdateRequest {
  title: string;
  color: string;
  priority: number;
}

export interface RecordGroupResponse {
  recordGroup?: RecordGroup | undefined;
}

function createBaseCreateRecordGroupRequest(): CreateRecordGroupRequest {
  return { title: "", color: "", type: 0, priority: 0 };
}

export const CreateRecordGroupRequest: MessageFns<CreateRecordGroupRequest> = {
  encode(message: CreateRecordGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.color !== "") {
      writer.uint32(18).string(message.color);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.priority !== 0) {
      writer.uint32(800).uint64(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRecordGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRecordGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.priority = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRecordGroupRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      type: isSet(object.type) ? recordGroup_RecordGroupTypeFromJSON(object.type) : 0,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: CreateRecordGroupRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.type !== 0) {
      obj.type = recordGroup_RecordGroupTypeToJSON(message.type);
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRecordGroupRequest>, I>>(base?: I): CreateRecordGroupRequest {
    return CreateRecordGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRecordGroupRequest>, I>>(object: I): CreateRecordGroupRequest {
    const message = createBaseCreateRecordGroupRequest();
    message.title = object.title ?? "";
    message.color = object.color ?? "";
    message.type = object.type ?? 0;
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseRecordGroupListResponse(): RecordGroupListResponse {
  return { groups: [] };
}

export const RecordGroupListResponse: MessageFns<RecordGroupListResponse> = {
  encode(message: RecordGroupListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groups) {
      RecordGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordGroupListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordGroupListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groups.push(RecordGroup.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordGroupListResponse {
    return {
      groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e: any) => RecordGroup.fromJSON(e)) : [],
    };
  },

  toJSON(message: RecordGroupListResponse): unknown {
    const obj: any = {};
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => RecordGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordGroupListResponse>, I>>(base?: I): RecordGroupListResponse {
    return RecordGroupListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordGroupListResponse>, I>>(object: I): RecordGroupListResponse {
    const message = createBaseRecordGroupListResponse();
    message.groups = object.groups?.map((e) => RecordGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordGroupDetailResponse(): RecordGroupDetailResponse {
  return { groups: undefined, workers: [] };
}

export const RecordGroupDetailResponse: MessageFns<RecordGroupDetailResponse> = {
  encode(message: RecordGroupDetailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groups !== undefined) {
      RecordGroup.encode(message.groups, writer.uint32(10).fork()).join();
    }
    for (const v of message.workers) {
      Worker.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordGroupDetailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordGroupDetailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groups = RecordGroup.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workers.push(Worker.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordGroupDetailResponse {
    return {
      groups: isSet(object.groups) ? RecordGroup.fromJSON(object.groups) : undefined,
      workers: globalThis.Array.isArray(object?.workers) ? object.workers.map((e: any) => Worker.fromJSON(e)) : [],
    };
  },

  toJSON(message: RecordGroupDetailResponse): unknown {
    const obj: any = {};
    if (message.groups !== undefined) {
      obj.groups = RecordGroup.toJSON(message.groups);
    }
    if (message.workers?.length) {
      obj.workers = message.workers.map((e) => Worker.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordGroupDetailResponse>, I>>(base?: I): RecordGroupDetailResponse {
    return RecordGroupDetailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordGroupDetailResponse>, I>>(object: I): RecordGroupDetailResponse {
    const message = createBaseRecordGroupDetailResponse();
    message.groups = (object.groups !== undefined && object.groups !== null)
      ? RecordGroup.fromPartial(object.groups)
      : undefined;
    message.workers = object.workers?.map((e) => Worker.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordGroupJoinRequest(): RecordGroupJoinRequest {
  return { recordGroupId: "", workerId: "" };
}

export const RecordGroupJoinRequest: MessageFns<RecordGroupJoinRequest> = {
  encode(message: RecordGroupJoinRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordGroupId !== "") {
      writer.uint32(10).string(message.recordGroupId);
    }
    if (message.workerId !== "") {
      writer.uint32(18).string(message.workerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordGroupJoinRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordGroupJoinRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordGroupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordGroupJoinRequest {
    return {
      recordGroupId: isSet(object.recordGroupId) ? globalThis.String(object.recordGroupId) : "",
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
    };
  },

  toJSON(message: RecordGroupJoinRequest): unknown {
    const obj: any = {};
    if (message.recordGroupId !== "") {
      obj.recordGroupId = message.recordGroupId;
    }
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordGroupJoinRequest>, I>>(base?: I): RecordGroupJoinRequest {
    return RecordGroupJoinRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordGroupJoinRequest>, I>>(object: I): RecordGroupJoinRequest {
    const message = createBaseRecordGroupJoinRequest();
    message.recordGroupId = object.recordGroupId ?? "";
    message.workerId = object.workerId ?? "";
    return message;
  },
};

function createBaseRecordGroupUpdateRequest(): RecordGroupUpdateRequest {
  return { title: "", color: "", priority: 0 };
}

export const RecordGroupUpdateRequest: MessageFns<RecordGroupUpdateRequest> = {
  encode(message: RecordGroupUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.color !== "") {
      writer.uint32(18).string(message.color);
    }
    if (message.priority !== 0) {
      writer.uint32(24).uint64(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordGroupUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordGroupUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.priority = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordGroupUpdateRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
    };
  },

  toJSON(message: RecordGroupUpdateRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordGroupUpdateRequest>, I>>(base?: I): RecordGroupUpdateRequest {
    return RecordGroupUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordGroupUpdateRequest>, I>>(object: I): RecordGroupUpdateRequest {
    const message = createBaseRecordGroupUpdateRequest();
    message.title = object.title ?? "";
    message.color = object.color ?? "";
    message.priority = object.priority ?? 0;
    return message;
  },
};

function createBaseRecordGroupResponse(): RecordGroupResponse {
  return { recordGroup: undefined };
}

export const RecordGroupResponse: MessageFns<RecordGroupResponse> = {
  encode(message: RecordGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordGroup !== undefined) {
      RecordGroup.encode(message.recordGroup, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordGroup = RecordGroup.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordGroupResponse {
    return { recordGroup: isSet(object.recordGroup) ? RecordGroup.fromJSON(object.recordGroup) : undefined };
  },

  toJSON(message: RecordGroupResponse): unknown {
    const obj: any = {};
    if (message.recordGroup !== undefined) {
      obj.recordGroup = RecordGroup.toJSON(message.recordGroup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordGroupResponse>, I>>(base?: I): RecordGroupResponse {
    return RecordGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordGroupResponse>, I>>(object: I): RecordGroupResponse {
    const message = createBaseRecordGroupResponse();
    message.recordGroup = (object.recordGroup !== undefined && object.recordGroup !== null)
      ? RecordGroup.fromPartial(object.recordGroup)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

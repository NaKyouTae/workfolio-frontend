// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: career.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Career, Career_EmploymentType, career_EmploymentTypeFromJSON, career_EmploymentTypeToJSON } from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface CareerCreateRequest {
  name: string;
  startedAt: number;
  endedAt: number;
  isWorking: boolean;
  position: string;
  employmentType: Career_EmploymentType;
  department: string;
  resumeId: string;
}

export interface CareerUpdateRequest {
  id: string;
  name: string;
  startedAt: number;
  endedAt?: number | undefined;
  isWorking: boolean;
  position: string;
  employmentType: Career_EmploymentType;
  department: string;
}

export interface CareerListResponse {
  careers: Career[];
}

export interface CareerResponse {
  career?: Career | undefined;
}

function createBaseCareerCreateRequest(): CareerCreateRequest {
  return {
    name: "",
    startedAt: 0,
    endedAt: 0,
    isWorking: false,
    position: "",
    employmentType: 0,
    department: "",
    resumeId: "",
  };
}

export const CareerCreateRequest: MessageFns<CareerCreateRequest> = {
  encode(message: CareerCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(16).uint64(message.startedAt);
    }
    if (message.endedAt !== 0) {
      writer.uint32(24).uint64(message.endedAt);
    }
    if (message.isWorking !== false) {
      writer.uint32(32).bool(message.isWorking);
    }
    if (message.position !== "") {
      writer.uint32(50).string(message.position);
    }
    if (message.employmentType !== 0) {
      writer.uint32(56).int32(message.employmentType);
    }
    if (message.department !== "") {
      writer.uint32(66).string(message.department);
    }
    if (message.resumeId !== "") {
      writer.uint32(794).string(message.resumeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CareerCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCareerCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isWorking = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.employmentType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.department = reader.string();
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.resumeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CareerCreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : 0,
      isWorking: isSet(object.isWorking) ? globalThis.Boolean(object.isWorking) : false,
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      employmentType: isSet(object.employmentType) ? career_EmploymentTypeFromJSON(object.employmentType) : 0,
      department: isSet(object.department) ? globalThis.String(object.department) : "",
      resumeId: isSet(object.resumeId) ? globalThis.String(object.resumeId) : "",
    };
  },

  toJSON(message: CareerCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== 0) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isWorking !== false) {
      obj.isWorking = message.isWorking;
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.employmentType !== 0) {
      obj.employmentType = career_EmploymentTypeToJSON(message.employmentType);
    }
    if (message.department !== "") {
      obj.department = message.department;
    }
    if (message.resumeId !== "") {
      obj.resumeId = message.resumeId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CareerCreateRequest>, I>>(base?: I): CareerCreateRequest {
    return CareerCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CareerCreateRequest>, I>>(object: I): CareerCreateRequest {
    const message = createBaseCareerCreateRequest();
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? 0;
    message.isWorking = object.isWorking ?? false;
    message.position = object.position ?? "";
    message.employmentType = object.employmentType ?? 0;
    message.department = object.department ?? "";
    message.resumeId = object.resumeId ?? "";
    return message;
  },
};

function createBaseCareerUpdateRequest(): CareerUpdateRequest {
  return {
    id: "",
    name: "",
    startedAt: 0,
    endedAt: undefined,
    isWorking: false,
    position: "",
    employmentType: 0,
    department: "",
  };
}

export const CareerUpdateRequest: MessageFns<CareerUpdateRequest> = {
  encode(message: CareerUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.startedAt !== 0) {
      writer.uint32(24).uint64(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(32).uint64(message.endedAt);
    }
    if (message.isWorking !== false) {
      writer.uint32(40).bool(message.isWorking);
    }
    if (message.position !== "") {
      writer.uint32(50).string(message.position);
    }
    if (message.employmentType !== 0) {
      writer.uint32(56).int32(message.employmentType);
    }
    if (message.department !== "") {
      writer.uint32(66).string(message.department);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CareerUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCareerUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isWorking = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.position = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.employmentType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.department = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CareerUpdateRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      startedAt: isSet(object.startedAt) ? globalThis.Number(object.startedAt) : 0,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      isWorking: isSet(object.isWorking) ? globalThis.Boolean(object.isWorking) : false,
      position: isSet(object.position) ? globalThis.String(object.position) : "",
      employmentType: isSet(object.employmentType) ? career_EmploymentTypeFromJSON(object.employmentType) : 0,
      department: isSet(object.department) ? globalThis.String(object.department) : "",
    };
  },

  toJSON(message: CareerUpdateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.startedAt !== 0) {
      obj.startedAt = Math.round(message.startedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.isWorking !== false) {
      obj.isWorking = message.isWorking;
    }
    if (message.position !== "") {
      obj.position = message.position;
    }
    if (message.employmentType !== 0) {
      obj.employmentType = career_EmploymentTypeToJSON(message.employmentType);
    }
    if (message.department !== "") {
      obj.department = message.department;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CareerUpdateRequest>, I>>(base?: I): CareerUpdateRequest {
    return CareerUpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CareerUpdateRequest>, I>>(object: I): CareerUpdateRequest {
    const message = createBaseCareerUpdateRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.startedAt = object.startedAt ?? 0;
    message.endedAt = object.endedAt ?? undefined;
    message.isWorking = object.isWorking ?? false;
    message.position = object.position ?? "";
    message.employmentType = object.employmentType ?? 0;
    message.department = object.department ?? "";
    return message;
  },
};

function createBaseCareerListResponse(): CareerListResponse {
  return { careers: [] };
}

export const CareerListResponse: MessageFns<CareerListResponse> = {
  encode(message: CareerListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.careers) {
      Career.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CareerListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCareerListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.careers.push(Career.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CareerListResponse {
    return {
      careers: globalThis.Array.isArray(object?.careers) ? object.careers.map((e: any) => Career.fromJSON(e)) : [],
    };
  },

  toJSON(message: CareerListResponse): unknown {
    const obj: any = {};
    if (message.careers?.length) {
      obj.careers = message.careers.map((e) => Career.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CareerListResponse>, I>>(base?: I): CareerListResponse {
    return CareerListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CareerListResponse>, I>>(object: I): CareerListResponse {
    const message = createBaseCareerListResponse();
    message.careers = object.careers?.map((e) => Career.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCareerResponse(): CareerResponse {
  return { career: undefined };
}

export const CareerResponse: MessageFns<CareerResponse> = {
  encode(message: CareerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.career !== undefined) {
      Career.encode(message.career, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CareerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCareerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.career = Career.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CareerResponse {
    return { career: isSet(object.career) ? Career.fromJSON(object.career) : undefined };
  },

  toJSON(message: CareerResponse): unknown {
    const obj: any = {};
    if (message.career !== undefined) {
      obj.career = Career.toJSON(message.career);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CareerResponse>, I>>(base?: I): CareerResponse {
    return CareerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CareerResponse>, I>>(object: I): CareerResponse {
    const message = createBaseCareerResponse();
    message.career = (object.career !== undefined && object.career !== null)
      ? Career.fromPartial(object.career)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: job_search_company.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  JobSearchCompany,
  JobSearchCompany_Status,
  jobSearchCompany_StatusFromJSON,
  jobSearchCompany_StatusToJSON,
} from "./common";

export const protobufPackage = "com.spectrum.workfolio.proto";

export interface JobSearchCompanyUpsertRequest {
  name: string;
  status: JobSearchCompany_Status;
  closedAt?: number | undefined;
  appliedAt?: number | undefined;
  endedAt?: number | undefined;
  link?: string | undefined;
  industry?: string | undefined;
  location?: string | undefined;
  businessSize?: string | undefined;
  description?: string | undefined;
  memo?: string | undefined;
}

export interface JobSearchCompanyListResponse {
  jobSearchCompanies: JobSearchCompany[];
}

export interface JobSearchCompanyResponse {
  jobSearchCompany?: JobSearchCompany | undefined;
}

function createBaseJobSearchCompanyUpsertRequest(): JobSearchCompanyUpsertRequest {
  return {
    name: "",
    status: 0,
    closedAt: undefined,
    appliedAt: undefined,
    endedAt: undefined,
    link: undefined,
    industry: undefined,
    location: undefined,
    businessSize: undefined,
    description: undefined,
    memo: undefined,
  };
}

export const JobSearchCompanyUpsertRequest: MessageFns<JobSearchCompanyUpsertRequest> = {
  encode(message: JobSearchCompanyUpsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.closedAt !== undefined) {
      writer.uint32(24).uint64(message.closedAt);
    }
    if (message.appliedAt !== undefined) {
      writer.uint32(32).uint64(message.appliedAt);
    }
    if (message.endedAt !== undefined) {
      writer.uint32(40).uint64(message.endedAt);
    }
    if (message.link !== undefined) {
      writer.uint32(50).string(message.link);
    }
    if (message.industry !== undefined) {
      writer.uint32(58).string(message.industry);
    }
    if (message.location !== undefined) {
      writer.uint32(66).string(message.location);
    }
    if (message.businessSize !== undefined) {
      writer.uint32(74).string(message.businessSize);
    }
    if (message.description !== undefined) {
      writer.uint32(82).string(message.description);
    }
    if (message.memo !== undefined) {
      writer.uint32(90).string(message.memo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchCompanyUpsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchCompanyUpsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.closedAt = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.appliedAt = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endedAt = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.link = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.industry = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.businessSize = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchCompanyUpsertRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      status: isSet(object.status) ? jobSearchCompany_StatusFromJSON(object.status) : 0,
      closedAt: isSet(object.closedAt) ? globalThis.Number(object.closedAt) : undefined,
      appliedAt: isSet(object.appliedAt) ? globalThis.Number(object.appliedAt) : undefined,
      endedAt: isSet(object.endedAt) ? globalThis.Number(object.endedAt) : undefined,
      link: isSet(object.link) ? globalThis.String(object.link) : undefined,
      industry: isSet(object.industry) ? globalThis.String(object.industry) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : undefined,
      businessSize: isSet(object.businessSize) ? globalThis.String(object.businessSize) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : undefined,
    };
  },

  toJSON(message: JobSearchCompanyUpsertRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = jobSearchCompany_StatusToJSON(message.status);
    }
    if (message.closedAt !== undefined) {
      obj.closedAt = Math.round(message.closedAt);
    }
    if (message.appliedAt !== undefined) {
      obj.appliedAt = Math.round(message.appliedAt);
    }
    if (message.endedAt !== undefined) {
      obj.endedAt = Math.round(message.endedAt);
    }
    if (message.link !== undefined) {
      obj.link = message.link;
    }
    if (message.industry !== undefined) {
      obj.industry = message.industry;
    }
    if (message.location !== undefined) {
      obj.location = message.location;
    }
    if (message.businessSize !== undefined) {
      obj.businessSize = message.businessSize;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.memo !== undefined) {
      obj.memo = message.memo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchCompanyUpsertRequest>, I>>(base?: I): JobSearchCompanyUpsertRequest {
    return JobSearchCompanyUpsertRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchCompanyUpsertRequest>, I>>(
    object: I,
  ): JobSearchCompanyUpsertRequest {
    const message = createBaseJobSearchCompanyUpsertRequest();
    message.name = object.name ?? "";
    message.status = object.status ?? 0;
    message.closedAt = object.closedAt ?? undefined;
    message.appliedAt = object.appliedAt ?? undefined;
    message.endedAt = object.endedAt ?? undefined;
    message.link = object.link ?? undefined;
    message.industry = object.industry ?? undefined;
    message.location = object.location ?? undefined;
    message.businessSize = object.businessSize ?? undefined;
    message.description = object.description ?? undefined;
    message.memo = object.memo ?? undefined;
    return message;
  },
};

function createBaseJobSearchCompanyListResponse(): JobSearchCompanyListResponse {
  return { jobSearchCompanies: [] };
}

export const JobSearchCompanyListResponse: MessageFns<JobSearchCompanyListResponse> = {
  encode(message: JobSearchCompanyListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobSearchCompanies) {
      JobSearchCompany.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchCompanyListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchCompanyListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobSearchCompanies.push(JobSearchCompany.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchCompanyListResponse {
    return {
      jobSearchCompanies: globalThis.Array.isArray(object?.jobSearchCompanies)
        ? object.jobSearchCompanies.map((e: any) => JobSearchCompany.fromJSON(e))
        : [],
    };
  },

  toJSON(message: JobSearchCompanyListResponse): unknown {
    const obj: any = {};
    if (message.jobSearchCompanies?.length) {
      obj.jobSearchCompanies = message.jobSearchCompanies.map((e) => JobSearchCompany.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchCompanyListResponse>, I>>(base?: I): JobSearchCompanyListResponse {
    return JobSearchCompanyListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchCompanyListResponse>, I>>(object: I): JobSearchCompanyListResponse {
    const message = createBaseJobSearchCompanyListResponse();
    message.jobSearchCompanies = object.jobSearchCompanies?.map((e) => JobSearchCompany.fromPartial(e)) || [];
    return message;
  },
};

function createBaseJobSearchCompanyResponse(): JobSearchCompanyResponse {
  return { jobSearchCompany: undefined };
}

export const JobSearchCompanyResponse: MessageFns<JobSearchCompanyResponse> = {
  encode(message: JobSearchCompanyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobSearchCompany !== undefined) {
      JobSearchCompany.encode(message.jobSearchCompany, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobSearchCompanyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobSearchCompanyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobSearchCompany = JobSearchCompany.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobSearchCompanyResponse {
    return {
      jobSearchCompany: isSet(object.jobSearchCompany) ? JobSearchCompany.fromJSON(object.jobSearchCompany) : undefined,
    };
  },

  toJSON(message: JobSearchCompanyResponse): unknown {
    const obj: any = {};
    if (message.jobSearchCompany !== undefined) {
      obj.jobSearchCompany = JobSearchCompany.toJSON(message.jobSearchCompany);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobSearchCompanyResponse>, I>>(base?: I): JobSearchCompanyResponse {
    return JobSearchCompanyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobSearchCompanyResponse>, I>>(object: I): JobSearchCompanyResponse {
    const message = createBaseJobSearchCompanyResponse();
    message.jobSearchCompany = (object.jobSearchCompany !== undefined && object.jobSearchCompany !== null)
      ? JobSearchCompany.fromPartial(object.jobSearchCompany)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
